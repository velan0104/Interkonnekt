"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@cloudinary-util";
exports.ids = ["vendor-chunks/@cloudinary-util"];
exports.modules = {

/***/ "(ssr)/./node_modules/@cloudinary-util/url-loader/dist/chunk-L3YIXMGG.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@cloudinary-util/url-loader/dist/chunk-L3YIXMGG.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assetOptionsSchema: () => (/* binding */ assetOptionsSchema),\n/* harmony export */   constructCloudinaryUrl: () => (/* binding */ constructCloudinaryUrl),\n/* harmony export */   constructUrlPropsSchema: () => (/* binding */ constructUrlPropsSchema),\n/* harmony export */   effects: () => (/* binding */ effects),\n/* harmony export */   imageOptionsSchema: () => (/* binding */ imageOptionsSchema),\n/* harmony export */   position: () => (/* binding */ position),\n/* harmony export */   primary: () => (/* binding */ primary),\n/* harmony export */   text: () => (/* binding */ text),\n/* harmony export */   transformationPlugins: () => (/* binding */ transformationPlugins),\n/* harmony export */   videoOptionsSchema: () => (/* binding */ videoOptionsSchema)\n/* harmony export */ });\n/* harmony import */ var _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/url-loader/node_modules/@cloudinary-util/util/dist/index.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(ssr)/./node_modules/zod/lib/index.mjs\");\n/* harmony import */ var _cloudinary_url_gen__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @cloudinary/url-gen */ \"(ssr)/./node_modules/@cloudinary/url-gen/instance/Cloudinary.js\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/constants/qualifiers.ts\n\n\n\n// src/constants/parameters.ts\nvar parameters_exports = {};\n__export(parameters_exports, {\n  angle: () => angle,\n  aspectRatio: () => aspectRatio,\n  aspectRatioModesEnum: () => aspectRatioModesEnum,\n  crop: () => crop,\n  cropModesEnum: () => cropModesEnum,\n  extractMode: () => extractMode,\n  extractModesEnum: () => extractModesEnum,\n  flags: () => flags,\n  flagsEnum: () => flagsEnum,\n  format: () => format,\n  gravity: () => gravity,\n  height: () => height,\n  multiple: () => multiple,\n  prompt: () => prompt,\n  width: () => width,\n  x: () => x,\n  y: () => y,\n  zoom: () => zoom\n});\n\nvar cropModesEnum = zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n  \"auto\",\n  \"crop\",\n  \"fill\",\n  \"fill_pad\",\n  \"fit\",\n  \"imagga_crop\",\n  \"imagga_scale\",\n  \"lfill\",\n  \"limit\",\n  \"lpad\",\n  \"mfit\",\n  \"mpad\",\n  \"pad\",\n  \"scale\",\n  \"thumb\"\n]);\nvar extractModesEnum = zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n  \"content\",\n  \"mask\"\n]);\nvar flagsEnum = zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n  \"animated\",\n  \"any_format\",\n  \"apng\",\n  \"attachment\",\n  \"awebp\",\n  \"clip\",\n  \"clip_evenodd\",\n  \"cutter\",\n  \"force_icc\",\n  \"force_strip\",\n  \"getinfo\",\n  \"group4\",\n  \"hlsv3\",\n  \"ignore_aspect_ratio\",\n  \"ignore_mask_channels\",\n  \"immutable_cache\",\n  \"keep_attribution\",\n  \"keep_dar\",\n  \"keep_iptc\",\n  \"layer_apply\",\n  \"lossy\",\n  \"mono\",\n  \"no_overflow\",\n  \"no_stream\",\n  \"png8_fl_png24_fl_png32\",\n  \"preserve_transparency\",\n  \"progressive\",\n  \"rasterize\",\n  \"region_relative\",\n  \"relative\",\n  \"replace_image\",\n  \"sanitize\",\n  \"splice\",\n  \"streaming_attachment\",\n  \"strip_profile\",\n  \"text_disallow_overflow\",\n  \"text_no_trim\",\n  \"tiff8_lzw\",\n  \"tiled\",\n  \"truncate_ts\",\n  \"waveform\"\n]);\nvar angle = {\n  qualifier: \"a\",\n  schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number()]).describe(\n    JSON.stringify({\n      text: \"Rotates or flips an asset by the specified number of degrees or automatically according to its orientation or available metadata.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#a_angle\"\n    })\n  )\n};\nvar aspectRatioModesEnum = zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n  \"vflip\",\n  \"hflip\",\n  \"ignore\",\n  \"auto_right\",\n  \"auto_left\"\n]);\nvar aspectRatioSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n  zod__WEBPACK_IMPORTED_MODULE_0__.z.number(),\n  aspectRatioModesEnum,\n  zod__WEBPACK_IMPORTED_MODULE_0__.z.intersection(zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.object({}))\n  // Quirk to allow enum + string\n]);\nvar aspectRatio = {\n  qualifier: \"ar\",\n  schema: aspectRatioSchema.describe(\n    JSON.stringify({\n      text: \"Crops or resizes the asset to a new aspect ratio.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#ar_aspect_ratio\"\n    })\n  )\n};\nvar cropSchema = cropModesEnum;\nvar crop = {\n  qualifier: \"c\",\n  schema: cropSchema.describe(\n    JSON.stringify({\n      text: \"Mode to use when cropping an asset.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#c_crop_resize\"\n    })\n  )\n};\nvar extractModeSchema = extractModesEnum;\nvar extractMode = {\n  schema: extractModeSchema.default(\"content\").describe(\n    JSON.stringify({\n      text: \"Whether to keep the content of the extracted area, or to replace it with a mask.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#e_extract\"\n    })\n  )\n};\nvar flags = {\n  qualifier: \"fl\",\n  schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([flagsEnum, zod__WEBPACK_IMPORTED_MODULE_0__.z.array(flagsEnum)]).describe(\n    JSON.stringify({\n      text: \"Alters the regular behavior of another transformation or the overall delivery behavior.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#fl_flag\"\n    })\n  )\n};\nvar format = {\n  qualifier: \"f\",\n  // @TODO: enum\n  schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n    JSON.stringify({\n      text: \"Converts (if necessary) and delivers an asset in the specified format regardless of the file extension used in the delivery URL.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#f_format\"\n    })\n  )\n};\nvar gravitySchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n  zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n    \"auto\",\n    \"auto_content_aware\",\n    \"center\",\n    \"custom\",\n    \"east\",\n    \"face\",\n    \"face_center\",\n    \"multi_face\",\n    \"north\",\n    \"north_east\",\n    \"north_west\",\n    \"south\",\n    \"south_east\",\n    \"south_west\",\n    \"west\"\n  ]),\n  // Quirk to allow enum + string\n  zod__WEBPACK_IMPORTED_MODULE_0__.z.intersection(zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.object({}))\n]);\nvar gravity = {\n  qualifier: \"g\",\n  schema: gravitySchema.describe(\n    JSON.stringify({\n      text: \"Determines which part of an asset to focus on. Note: Default of auto is applied for supported crop modes only.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#g_gravity\"\n    })\n  )\n};\nvar heightSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.number(), zod__WEBPACK_IMPORTED_MODULE_0__.z.string()]);\nvar height = {\n  qualifier: \"h\",\n  schema: heightSchema.describe(\n    JSON.stringify({\n      text: \"A qualifier that determines the height of a transformed asset or an overlay.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#h_height\"\n    })\n  )\n};\nvar multipleSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean();\nvar multiple = {\n  schema: multipleSchema.describe(\n    JSON.stringify({\n      text: \"Should generative AI features detect multiple instances.\"\n    })\n  )\n};\nvar prompt = {\n  schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n    JSON.stringify({\n      text: \"Natural language descriptions used for generative AI capabilities.\"\n    })\n  )\n};\nvar widthSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.number(), zod__WEBPACK_IMPORTED_MODULE_0__.z.string()]);\nvar width = {\n  qualifier: \"w\",\n  schema: widthSchema.describe(\n    JSON.stringify({\n      text: \"A qualifier that sets the desired width of an asset using a specified value, or automatically based on the available width.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#w_width\"\n    })\n  )\n};\nvar x = {\n  qualifier: \"x\",\n  schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number()]).describe(\n    JSON.stringify({\n      text: \"Adjusts the starting location or offset of the x axis.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#x_y_coordinates\"\n    })\n  )\n};\nvar y = {\n  qualifier: \"y\",\n  schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number()]).describe(\n    JSON.stringify({\n      text: \"Adjusts the starting location or offset of the y axis.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#x_y_coordinates\"\n    })\n  )\n};\nvar zoomSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.string();\nvar zoom = {\n  schema: zoomSchema.describe(\n    JSON.stringify({\n      text: \"Controls how close to crop to the detected coordinates when using face-detection, custom-coordinate, or object-specific gravity.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#z_zoom\"\n    })\n  )\n};\n\n// src/constants/qualifiers.ts\nvar convertersColors = [\n  {\n    test: _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.testColorIsHex,\n    convert: _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.convertColorHexToRgb\n  }\n];\nvar primary = {\n  aspectRatio,\n  crop,\n  gravity,\n  height,\n  width\n};\nvar position = {\n  angle,\n  gravity,\n  x,\n  y\n};\nvar text = {\n  alignment: {\n    qualifier: false,\n    order: 6\n  },\n  antialias: {\n    qualifier: \"antialias\"\n  },\n  border: {\n    qualifier: \"bo\",\n    location: \"primary\"\n  },\n  color: {\n    qualifier: \"co\",\n    location: \"primary\",\n    converters: convertersColors\n  },\n  fontFamily: {\n    qualifier: false,\n    order: 1\n  },\n  fontSize: {\n    qualifier: false,\n    order: 2\n  },\n  fontStyle: {\n    qualifier: false,\n    order: 4\n  },\n  fontWeight: {\n    qualifier: false,\n    order: 3\n  },\n  hinting: {\n    qualifier: \"hinting\"\n  },\n  letterSpacing: {\n    qualifier: \"letter_spacing\"\n  },\n  lineSpacing: {\n    qualifier: \"line_spacing\"\n  },\n  stroke: {\n    qualifier: \"self\",\n    order: 7\n  },\n  textDecoration: {\n    qualifier: false,\n    order: 5\n  }\n};\nvar effects = {\n  angle,\n  art: {\n    prefix: \"e\",\n    qualifier: \"art\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n      JSON.stringify({\n        text: \"Applies the selected artistic filter.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_art\"\n      })\n    )\n  },\n  autoBrightness: {\n    prefix: \"e\",\n    qualifier: \"auto_brightness\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Automatically adjusts the image brightness and blends the result with the original image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_auto_brightness\"\n      })\n    )\n  },\n  autoColor: {\n    prefix: \"e\",\n    qualifier: \"auto_color\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Automatically adjusts the image color balance and blends the result with the original image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_auto_color\"\n      })\n    )\n  },\n  autoContrast: {\n    prefix: \"e\",\n    qualifier: \"auto_contrast\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Automatically adjusts the image contrast and blends the result with the original image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_auto_contrast\"\n      })\n    )\n  },\n  assistColorblind: {\n    prefix: \"e\",\n    qualifier: \"assist_colorblind\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Applies stripes or color adjustment to help people with common color blind conditions to differentiate between colors that are similar for them.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_assist_colorblind\"\n      })\n    )\n  },\n  background: {\n    qualifier: \"b\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n      JSON.stringify({\n        text: \"Applies a background to empty or transparent areas.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#b_background\"\n      })\n    )\n  },\n  blackwhite: {\n    prefix: \"e\",\n    qualifier: \"blackwhite\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Converts an image to black and white.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_blackwhite\"\n      })\n    )\n  },\n  blur: {\n    prefix: \"e\",\n    qualifier: \"blur\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Applies a blurring filter to an asset.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_blur\"\n      })\n    )\n  },\n  blurFaces: {\n    prefix: \"e\",\n    qualifier: \"blur_faces\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Blurs all detected faces in an image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_blur_faces\"\n      })\n    )\n  },\n  blurRegion: {\n    prefix: \"e\",\n    qualifier: \"blur_region\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Applies a blurring filter to the region of an image specified by x, y, width and height, or an area of text. If no region is specified, the whole image is blurred.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_blur_region\"\n      })\n    )\n  },\n  border: {\n    qualifier: \"bo\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n      JSON.stringify({\n        text: \"Adds a solid border around an image or video.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#bo_border\"\n      })\n    )\n  },\n  brightness: {\n    prefix: \"e\",\n    qualifier: \"brightness\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Adjusts the image or video brightness.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_brightness\"\n      })\n    )\n  },\n  brightnessHSB: {\n    prefix: \"e\",\n    qualifier: \"brightness_hsb\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Adjusts image brightness modulation in HSB to prevent artifacts in some images.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_brightness_hsb\"\n      })\n    )\n  },\n  cartoonify: {\n    prefix: \"e\",\n    qualifier: \"cartoonify\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Applies a cartoon effect to an image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_cartoonify\"\n      })\n    )\n  },\n  color: {\n    qualifier: \"co\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n      JSON.stringify({\n        text: \"A qualifier that specifies the color to use with the corresponding transformation.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#co_color\"\n      })\n    ),\n    converters: convertersColors\n  },\n  colorize: {\n    prefix: \"e\",\n    qualifier: \"colorize\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n      JSON.stringify({\n        text: \"Colorizes an image. By default, gray is used for colorization. You can specify a different color using the color qualifier.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_colorize\"\n      })\n    )\n  },\n  contrast: {\n    prefix: \"e\",\n    qualifier: \"contrast\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Adjusts an image or video contrast.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_contrast\"\n      })\n    )\n  },\n  displace: {\n    prefix: \"e\",\n    qualifier: \"distort\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n      JSON.stringify({\n        text: \"Displaces the pixels in an image according to the color channels of the pixels in another specified image (a gradient map specified with the overlay parameter).\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_displace\"\n      })\n    )\n  },\n  distort: {\n    prefix: \"e\",\n    qualifier: \"distort\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n      JSON.stringify({\n        text: \"Distorts an image to a new shape by either adjusting its corners or by warping it into an arc.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_distort\"\n      })\n    )\n  },\n  fillLight: {\n    prefix: \"e\",\n    qualifier: \"fill_light\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Adjusts the fill light and optionally blends the result with the original image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_fill_light\"\n      })\n    )\n  },\n  gamma: {\n    prefix: \"e\",\n    qualifier: \"gamma\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Adjusts the image or video gamma level.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_gamma\"\n      })\n    )\n  },\n  gradientFade: {\n    prefix: \"e\",\n    qualifier: \"gradient_fade\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Applies a gradient fade effect from the edge of an image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_gradient_fade\"\n      })\n    )\n  },\n  grayscale: {\n    prefix: \"e\",\n    qualifier: \"grayscale\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().describe(\n      JSON.stringify({\n        text: \"Converts an image to grayscale (multiple shades of gray).\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_grayscale\"\n      })\n    )\n  },\n  hue: {\n    prefix: \"e\",\n    qualifier: \"hue\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Adjusts an image's hue.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_hue\"\n      })\n    )\n  },\n  improve: {\n    prefix: \"e\",\n    qualifier: \"improve\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Adjusts an image's colors, contrast and brightness to improve its appearance.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_improve\"\n      })\n    )\n  },\n  loop: {\n    prefix: \"e\",\n    qualifier: \"loop\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number(), zod__WEBPACK_IMPORTED_MODULE_0__.z.string()]).describe(\n      JSON.stringify({\n        text: \"Loops a video or animated image the specified number of times.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_loop\"\n      })\n    )\n  },\n  multiply: {\n    prefix: \"e\",\n    qualifier: \"multiply\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().describe(\n      JSON.stringify({\n        text: \"A qualifier that blends image layers using the multiply blend mode\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_multiply\"\n      })\n    )\n  },\n  negate: {\n    prefix: \"e\",\n    qualifier: \"negate\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"https://cloudinary.com/documentation/transformation_reference#e_negate\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_negate\"\n      })\n    )\n  },\n  noise: {\n    prefix: \"e\",\n    qualifier: \"noise\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().describe(\n      JSON.stringify({\n        text: \"https://cloudinary.com/documentation/transformation_reference#e_noise\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_noise\"\n      })\n    )\n  },\n  oilPaint: {\n    prefix: \"e\",\n    qualifier: \"oil_paint\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"https://cloudinary.com/documentation/transformation_reference#e_oil_paint\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_oil_paint\"\n      })\n    )\n  },\n  opacity: {\n    qualifier: \"o\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number()]).describe(\n      JSON.stringify({\n        text: \"Adjusts the opacity of an asset and makes it semi-transparent.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#o_opacity\"\n      })\n    )\n  },\n  outline: {\n    prefix: \"e\",\n    qualifier: \"outline\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Adds an outline effect to an image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_outline\"\n      })\n    )\n  },\n  pixelate: {\n    prefix: \"e\",\n    qualifier: \"pixelate\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Applies a pixelation effect.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_pixelate\"\n      })\n    )\n  },\n  pixelateFaces: {\n    prefix: \"e\",\n    qualifier: \"pixelate_faces\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Pixelates all detected faces in an image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_pixelate_faces\"\n      })\n    )\n  },\n  pixelateRegion: {\n    prefix: \"e\",\n    qualifier: \"pixelate_region\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Pixelates the region of an image specified by x, y, width and height, or an area of text.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_pixelate_region\"\n      })\n    )\n  },\n  radius: {\n    qualifier: \"r\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number()]).describe(\n      JSON.stringify({\n        text: \"Rounds the corners of an image or video.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#r_round_corners\"\n      })\n    )\n  },\n  redeye: {\n    prefix: \"e\",\n    qualifier: \"redeye\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Automatically removes red eyes in an image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_redeye\"\n      })\n    )\n  },\n  replaceColor: {\n    prefix: \"e\",\n    qualifier: \"replace_color\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n      JSON.stringify({\n        text: \"Maps an input color and those similar to the input color to corresponding shades of a specified output color.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_replace_color\"\n      })\n    )\n  },\n  saturation: {\n    prefix: \"e\",\n    qualifier: \"saturation\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Adjusts an image or video saturation level.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_saturation\"\n      })\n    )\n  },\n  screen: {\n    prefix: \"e\",\n    qualifier: \"screen\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().describe(\n      JSON.stringify({\n        text: \"A qualifier that blends image layers using the screen blend mode.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_screen\"\n      })\n    )\n  },\n  sepia: {\n    prefix: \"e\",\n    qualifier: \"sepia\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Changes the color scheme of an image to sepia.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_sepia\"\n      })\n    )\n  },\n  shadow: {\n    prefix: \"e\",\n    qualifier: \"shadow\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Adds a gray shadow to the bottom right of an image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_shadow\"\n      })\n    )\n  },\n  sharpen: {\n    prefix: \"e\",\n    qualifier: \"sharpen\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Applies a sharpening filter.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_sharpen\"\n      })\n    )\n  },\n  shear: {\n    prefix: \"e\",\n    qualifier: \"shear\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n      JSON.stringify({\n        text: \"Skews an image according to the two specified values in degrees.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_shear\"\n      })\n    )\n  },\n  simulateColorblind: {\n    prefix: \"e\",\n    qualifier: \"simulate_colorblind\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Simulates the way an image would appear to someone with the specified color blind condition.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_simulate_colorblind\"\n      })\n    )\n  },\n  tint: {\n    prefix: \"e\",\n    qualifier: \"tint\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Blends an image with one or more tint colors at a specified intensity.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_tint\"\n      })\n    )\n  },\n  trim: {\n    prefix: \"e\",\n    qualifier: \"trim\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Detects and removes image edges whose color is similar to the corner pixels.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_trim\"\n      })\n    )\n  },\n  unsharpMask: {\n    prefix: \"e\",\n    qualifier: \"unsharp_mask\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Applies an unsharp mask filter to an image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_unsharp_mask\"\n      })\n    )\n  },\n  vectorize: {\n    prefix: \"e\",\n    qualifier: \"vectorize\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Vectorizes an image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_vectorize\"\n      })\n    )\n  },\n  vibrance: {\n    prefix: \"e\",\n    qualifier: \"vibrance\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Applies a vibrance filter to an image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_vibrance\"\n      })\n    )\n  },\n  vignette: {\n    prefix: \"e\",\n    qualifier: \"vignette\",\n    schema: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n      JSON.stringify({\n        text: \"Applies a vignette effect to an image.\",\n        url: \"https://cloudinary.com/documentation/transformation_reference#e_vignette\"\n      })\n    )\n  }\n};\n\n// src/types/asset.ts\n\n\n// src/plugins/cropping.ts\n\n\n// src/lib/transformations.ts\nfunction constructTransformation({\n  prefix,\n  qualifier,\n  value,\n  converters\n}) {\n  let transformation = \"\";\n  if (prefix) {\n    transformation = `${prefix}_`;\n  }\n  let transformationValue = value;\n  converters?.forEach(({ test, convert }) => {\n    if (!test(transformationValue)) return;\n    transformationValue = convert(transformationValue);\n  });\n  if (transformationValue === true || transformationValue === \"true\") {\n    return `${transformation}${qualifier}`;\n  }\n  if (typeof transformationValue === \"string\" || typeof transformationValue === \"number\") {\n    if (prefix) {\n      return `${transformation}${qualifier}:${transformationValue}`;\n    } else {\n      return `${qualifier}_${transformationValue}`;\n    }\n  }\n}\nfunction promptArrayToString(promptArray) {\n  return `(${promptArray.join(\";\")})`;\n}\nfunction normalizeNumberParameter(param) {\n  if (typeof param !== \"string\") return param;\n  return parseInt(param);\n}\n\n// src/plugins/cropping.ts\nvar cropsAspectRatio = [\"auto\", \"crop\", \"fill\", \"lfill\", \"fill_pad\", \"thumb\"];\nvar cropsGravityAuto = [\"auto\", \"crop\", \"fill\", \"lfill\", \"fill_pad\", \"thumb\"];\nvar cropsWithZoom = [\"crop\", \"thumb\"];\nvar DEFAULT_CROP = \"limit\";\nvar cropOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  aspectRatio: aspectRatio.schema.optional(),\n  type: crop.schema,\n  gravity: gravity.schema.optional(),\n  height: height.schema.optional(),\n  width: width.schema.optional(),\n  x: x.schema.optional(),\n  y: y.schema.optional(),\n  zoom: zoom.schema.optional(),\n  source: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n});\nvar croppingProps = {\n  aspectRatio: aspectRatio.schema.optional(),\n  crop: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    crop.schema,\n    cropOptionsSchema,\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.array(cropOptionsSchema)\n  ]).default(DEFAULT_CROP).optional(),\n  gravity: gravity.schema.optional(),\n  zoom: zoom.schema.optional()\n};\nvar croppingPlugin = {\n  props: croppingProps,\n  assetTypes: [\"image\", \"images\", \"video\", \"videos\"],\n  plugin: (settings) => {\n    const { cldAsset, options } = settings;\n    let crops = [];\n    if (typeof options.crop === \"string\" || typeof options.crop === \"undefined\") {\n      crops.push({\n        aspectRatio: options.aspectRatio,\n        height: options.height,\n        gravity: options.gravity,\n        type: options.crop || DEFAULT_CROP,\n        width: options.width,\n        zoom: options.zoom\n      });\n    } else if (typeof options.crop === \"object\" && !Array.isArray(options.crop)) {\n      crops.push(options.crop);\n    } else if (Array.isArray(options.crop)) {\n      crops = options.crop;\n    }\n    if (crops.length === 1 && crops[0].source === true) {\n      crops.push({\n        aspectRatio: options.aspectRatio,\n        width: options.width,\n        height: options.height,\n        gravity: options.gravity,\n        type: DEFAULT_CROP,\n        zoom: options.zoom\n      });\n    }\n    const finalTransformations = [];\n    const sourceTransformations = [];\n    for (const crop2 of crops) {\n      const cropDimensions = {\n        width: crop2.width,\n        height: crop2.height\n      };\n      if (typeof cropDimensions.width === \"undefined\" && typeof crop2.aspectRatio === \"undefined\") {\n        cropDimensions.width = options.width;\n        if (typeof cropDimensions.height === \"undefined\") {\n          cropDimensions.height = options.height;\n        }\n      }\n      const transformations = collectTransformations({\n        aspectRatio: crop2.aspectRatio,\n        gravity: crop2.gravity,\n        type: crop2.type || DEFAULT_CROP,\n        x: crop2.x,\n        y: crop2.y,\n        zoom: crop2.zoom,\n        ...cropDimensions\n      });\n      if (transformations.length > 0) {\n        if (crop2.source === true) {\n          sourceTransformations.push(transformations);\n        } else {\n          finalTransformations.push(transformations);\n        }\n      }\n    }\n    sourceTransformations.forEach((transformation) => {\n      if (transformation.length > 0) {\n        cldAsset.addTransformation(transformation.join(\",\"));\n      }\n    });\n    const results = {\n      options: {}\n    };\n    if (results.options && finalTransformations.length > 0) {\n      results.options.resize = finalTransformations.map((transformation) => transformation.join(\",\")).join(\"/\");\n    }\n    return results;\n  }\n};\nfunction collectTransformations(collectOptions) {\n  const { aspectRatio: aspectRatio2, type: crop2, x: x2, y: y2, zoom: zoom2 } = collectOptions;\n  let gravity2 = collectOptions.gravity;\n  const height2 = normalizeNumberParameter(collectOptions.height);\n  const width2 = normalizeNumberParameter(collectOptions.width);\n  const transformations = [];\n  const hasDefinedDimensions = height2 || width2;\n  const hasValidAspectRatio = aspectRatio2 && cropsAspectRatio.includes(crop2);\n  const hasXCoordinate = typeof x2 === \"number\" || typeof x2 === \"string\";\n  const hasYCoordinate = typeof y2 === \"number\" || typeof y2 === \"string\";\n  const hasDefinedCoordinates = hasXCoordinate || hasYCoordinate;\n  if (crop2 && (hasDefinedDimensions || hasValidAspectRatio || hasDefinedCoordinates)) {\n    transformations.push(`c_${crop2}`);\n  }\n  if (hasValidAspectRatio) {\n    transformations.push(`ar_${aspectRatio2}`);\n  }\n  if (width2) {\n    transformations.push(`w_${width2}`);\n  }\n  if (![\"limit\"].includes(crop2) && typeof height2 === \"number\") {\n    transformations.push(`h_${height2}`);\n  }\n  if (hasXCoordinate) {\n    transformations.push(`x_${x2}`);\n  }\n  if (hasYCoordinate) {\n    transformations.push(`y_${y2}`);\n  }\n  if (!gravity2 && cropsGravityAuto.includes(crop2) && !hasDefinedCoordinates) {\n    gravity2 = \"auto\";\n  }\n  if (gravity2) {\n    if (gravity2 === \"auto\" && !cropsGravityAuto.includes(crop2)) {\n      console.warn(\n        `Auto gravity can only be used with crop modes: ${cropsGravityAuto.join(\n          \", \"\n        )}. Not applying gravity.`\n      );\n    } else {\n      transformations.push(`g_${gravity2}`);\n    }\n  }\n  if (zoom2) {\n    if (zoom2 === \"auto\" && !cropsWithZoom.includes(crop2)) {\n      console.warn(\n        `Zoom can only be used with crop modes: ${cropsWithZoom.join(\n          \", \"\n        )}. Not applying zoom.`\n      );\n    } else {\n      transformations.push(`z_${zoom2}`);\n    }\n  }\n  return transformations;\n}\n\n// src/plugins/effects.ts\n\nvar effectProps = {\n  angle: effects.angle.schema.optional(),\n  art: effects.art.schema.optional(),\n  autoBrightness: effects.autoBrightness.schema.optional(),\n  autoColor: effects.autoColor.schema.optional(),\n  autoContrast: effects.autoContrast.schema.optional(),\n  assistColorblind: effects.assistColorblind.schema.optional(),\n  background: effects.background.schema.optional(),\n  blackwhite: effects.blackwhite.schema.optional(),\n  blur: effects.blur.schema.optional(),\n  blurFaces: effects.blurFaces.schema.optional(),\n  blurRegion: effects.blurRegion.schema.optional(),\n  border: effects.border.schema.optional(),\n  brightness: effects.brightness.schema.optional(),\n  brightnessHSB: effects.brightnessHSB.schema.optional(),\n  cartoonify: effects.cartoonify.schema.optional(),\n  color: effects.color.schema.optional(),\n  colorize: effects.colorize.schema.optional(),\n  contrast: effects.contrast.schema.optional(),\n  distort: effects.distort.schema.optional(),\n  fillLight: effects.fillLight.schema.optional(),\n  gamma: effects.gamma.schema.optional(),\n  gradientFade: effects.gradientFade.schema.optional(),\n  grayscale: effects.grayscale.schema.optional(),\n  improve: effects.improve.schema.optional(),\n  loop: effects.loop.schema.optional(),\n  multiply: effects.multiply.schema.optional(),\n  negate: effects.negate.schema.optional(),\n  oilPaint: effects.oilPaint.schema.optional(),\n  opacity: effects.opacity.schema.optional(),\n  outline: effects.outline.schema.optional(),\n  pixelate: effects.pixelate.schema.optional(),\n  pixelateFaces: effects.pixelateFaces.schema.optional(),\n  pixelateRegion: effects.pixelateRegion.schema.optional(),\n  radius: effects.radius.schema.optional(),\n  redeye: effects.redeye.schema.optional(),\n  replaceColor: effects.replaceColor.schema.optional(),\n  saturation: effects.saturation.schema.optional(),\n  screen: effects.screen.schema.optional(),\n  sepia: effects.sepia.schema.optional(),\n  shadow: effects.shadow.schema.optional(),\n  sharpen: effects.sharpen.schema.optional(),\n  shear: effects.shear.schema.optional(),\n  simulateColorblind: effects.simulateColorblind.schema.optional(),\n  tint: effects.tint.schema.optional(),\n  trim: effects.trim.schema.optional(),\n  unsharpMask: effects.unsharpMask.schema.optional(),\n  vectorize: effects.vectorize.schema.optional(),\n  vibrance: effects.vibrance.schema.optional(),\n  vignette: effects.vignette.schema.optional()\n};\nvar effectsProps = {\n  effects: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.object(effectProps)).describe(\n    JSON.stringify({\n      text: \"Array of objects specifying transformations to be applied to asset.\"\n    })\n  ).optional(),\n  ...effectProps\n};\nvar effectsPlugin = {\n  props: effectsProps,\n  assetTypes: [\"image\", \"images\", \"video\", \"videos\"],\n  plugin: (settings) => {\n    const { cldAsset, options } = settings;\n    const transformationStrings = constructTransformationString({\n      effects,\n      options\n    });\n    transformationStrings.filter((t) => !!t).forEach((transformation) => cldAsset.effect(transformation));\n    if (Array.isArray(options?.effects)) {\n      options?.effects.forEach((effectsSet) => {\n        const transformationString = constructTransformationString({\n          effects,\n          options: effectsSet\n        }).filter((t) => !!t).join(\",\");\n        cldAsset.effect(transformationString);\n      });\n    }\n    function constructTransformationString({\n      effects: effects2,\n      options: options2\n    }) {\n      return Object.keys(effects2).map(\n        (key) => {\n          const { prefix, qualifier, converters } = effects2[key];\n          return constructTransformation({\n            qualifier,\n            prefix,\n            value: options2?.[key],\n            converters\n          });\n        }\n      );\n    }\n    return {};\n  }\n};\n\n// src/plugins/flags.ts\nvar { flagsEnum: flagsEnum2 } = parameters_exports;\nvar flagsProps = {\n  flags: flags.schema.optional()\n};\nvar flagsPlugin = {\n  props: flagsProps,\n  assetTypes: [\"image\", \"images\", \"video\", \"videos\"],\n  plugin: (settings) => {\n    const { cldAsset, options } = settings;\n    const { flags: flags2 = [] } = options;\n    if (Array.isArray(flags2) && flags2.length > 0) {\n      flags2.forEach((flag) => {\n        const { success } = flagsEnum2.safeParse(flag);\n        if (!success) {\n          if (true) {\n            console.warn(`Invalid flag ${flag}, not applying.`);\n          }\n          return;\n        }\n        cldAsset.addFlag(flag);\n      });\n    } else if (typeof flags2 === \"object\") {\n      Object.entries(flags2).forEach(([qualifier, value]) => {\n        const { success } = flagsEnum2.safeParse(qualifier);\n        if (!success) {\n          if (true) {\n            console.warn(`Invalid flag ${qualifier}, not applying.`);\n          }\n          return;\n        }\n        cldAsset.addTransformation(`fl_${qualifier}:${value}`);\n      });\n    }\n    return {};\n  }\n};\n\n// src/plugins/named-transformations.ts\n\nvar NamedTransformationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.string();\nvar namedTransformationsProps = {\n  namedTransformations: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([NamedTransformationSchema, zod__WEBPACK_IMPORTED_MODULE_0__.z.array(NamedTransformationSchema)]).describe(\n    JSON.stringify({\n      text: \"Named transformations to apply to asset.\",\n      url: \"https://cloudinary.com/documentation/image_transformations#named_transformations\"\n    })\n  ).optional(),\n  /**\n   * @deprecated use {@link `namedTransformations`} instead\n   */\n  transformations: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([NamedTransformationSchema, zod__WEBPACK_IMPORTED_MODULE_0__.z.array(NamedTransformationSchema)]).describe(\n    JSON.stringify({\n      text: \"Deprecated: use namedTransformations instead\",\n      url: \"https://cloudinary.com/documentation/image_transformations#named_transformations\"\n    })\n  ).optional()\n};\nvar namedTransformationsPlugin = {\n  props: namedTransformationsProps,\n  strict: true,\n  assetTypes: [\"image\", \"images\", \"video\", \"videos\"],\n  plugin: ({ cldAsset, options }) => {\n    const { transformations, namedTransformations } = options;\n    if (transformations && process.env.NODE_ENVIRONMENT === \"development\") {\n      console.warn(\n        \"The transformations prop is deprecated. Please use namedTransformations instead.\"\n      );\n    }\n    let _namedTransformations = namedTransformations || transformations || [];\n    if (!Array.isArray(_namedTransformations)) {\n      _namedTransformations = [_namedTransformations];\n    }\n    _namedTransformations.forEach((transformation) => {\n      cldAsset.addTransformation(`t_${transformation}`);\n    });\n    return {};\n  }\n};\n\n// src/plugins/overlays.ts\n\n\nvar overlayTextSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  alignment: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  antialias: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  border: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  color: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  fontFamily: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  fontSize: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n  fontStyle: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number()]).optional(),\n  fontWeight: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  hinting: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number()]).optional(),\n  letterSpacing: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number()]).optional(),\n  lineSpacing: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number()]).optional(),\n  stroke: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  text: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n  // Required if using object format\n});\nvar overlayPositionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  angle: angle.schema.optional(),\n  gravity: gravity.schema.optional(),\n  x: x.schema.optional(),\n  y: y.schema.optional()\n});\nvar overlaySchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  appliedEffects: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({})).optional(),\n  appliedFlags: flags.schema.optional(),\n  effects: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({})).optional(),\n  crop: crop.schema.optional(),\n  flags: flags.schema.optional(),\n  height: height.schema.optional(),\n  position: overlayPositionSchema.optional(),\n  publicId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  text: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), overlayTextSchema]).optional(),\n  url: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  width: width.schema.optional()\n});\nvar DEFAULT_TEXT_OPTIONS = {\n  color: \"black\",\n  fontFamily: \"Arial\",\n  fontSize: 200,\n  fontWeight: \"bold\"\n};\nvar overlaysProps = {\n  overlay: overlaySchema.describe(\n    JSON.stringify({\n      text: \"Image or text layer that is applied on top of the base image.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#l_layer\"\n    })\n  ).optional(),\n  overlays: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(overlaySchema).describe(\n    JSON.stringify({\n      text: \"Image or text layers that are applied on top of the base image.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#l_layer\"\n    })\n  ).optional(),\n  text: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n    JSON.stringify({\n      text: \"Text to be overlaid on asset.\",\n      url: \"https://cloudinary.com/documentation/image_transformations#transformation_url_structure\"\n    })\n  ).optional()\n};\nvar overlaysPlugin = {\n  props: overlaysProps,\n  assetTypes: [\"image\", \"images\", \"video\", \"videos\"],\n  plugin: ({ cldAsset, options }) => {\n    const { text: text2, overlays = [] } = options;\n    const type = \"overlay\";\n    const typeQualifier = \"l\";\n    if (Array.isArray(overlays)) {\n      overlays.forEach(applyOverlay);\n    }\n    if (typeof text2 === \"string\") {\n      applyOverlay({\n        text: Object.assign({}, DEFAULT_TEXT_OPTIONS, {\n          text: text2\n        })\n      });\n    } else if (typeof text2 === \"object\") {\n      applyOverlay({\n        text: Object.assign({}, DEFAULT_TEXT_OPTIONS, text2)\n      });\n    }\n    function applyOverlay({\n      publicId,\n      url,\n      position: position2,\n      text: text3,\n      effects: layerEffects = [],\n      appliedEffects = [],\n      flags: layerFlags = [],\n      appliedFlags = [],\n      ...options2\n    }) {\n      const hasPublicId = typeof publicId === \"string\";\n      const hasUrl = typeof url === \"string\";\n      const hasText = typeof text3 === \"object\" || typeof text3 === \"string\";\n      const hasPosition = typeof position2 === \"object\";\n      if (!hasPublicId && !hasUrl && !hasText) {\n        console.warn(`An ${type} is missing Public ID, URL, or Text`);\n        return;\n      }\n      let layerTransformation;\n      if (hasText) {\n        layerTransformation = `${typeQualifier}_text`;\n      } else if (hasPublicId) {\n        layerTransformation = `${typeQualifier}_${publicId.replace(\n          /\\//g,\n          \":\"\n        )}`;\n      } else if (hasUrl) {\n        layerTransformation = `${typeQualifier}_fetch:${(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.encodeBase64)(url)}`;\n      }\n      const primary2 = [];\n      const applied = [];\n      Object.keys(options2).forEach((key) => {\n        if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(primary, key)) return;\n        const { qualifier, converters } = primary[key];\n        const transformation = constructTransformation({\n          qualifier,\n          value: options2[key],\n          converters\n        });\n        if (transformation) {\n          primary2.push(transformation);\n        }\n      });\n      layerEffects.forEach((effect) => {\n        Object.keys(effect).forEach((key) => {\n          const effectQualifier = primary[key] || effects[key] || position[key];\n          if (!effectQualifier) return;\n          const { qualifier, prefix, converters } = effectQualifier;\n          const transformation = constructTransformation({\n            qualifier,\n            prefix,\n            value: effect[key],\n            converters\n          });\n          if (transformation) {\n            primary2.push(transformation);\n          }\n        });\n      });\n      appliedEffects.forEach((effect) => {\n        Object.keys(effect).forEach((key) => {\n          const effectQualifier = primary[key] || effects[key] || position[key];\n          if (!effectQualifier) return;\n          const { qualifier, prefix, converters } = effectQualifier;\n          const transformation = constructTransformation({\n            qualifier,\n            prefix,\n            value: effect[key],\n            converters\n          });\n          if (transformation) {\n            applied.push(transformation);\n          }\n        });\n      });\n      const activeLayerFlags = Array.isArray(layerFlags) ? layerFlags : [layerFlags];\n      activeLayerFlags.forEach((flag) => {\n        const { success } = flagsEnum.safeParse(flag);\n        if (!success) {\n          if (true) {\n            console.warn(`Invalid flag ${flag}, not applying.`);\n          }\n          return;\n        }\n        primary2.push(`fl_${flag}`);\n      });\n      const activeAppliedFlags = Array.isArray(appliedFlags) ? appliedFlags : [appliedFlags];\n      activeAppliedFlags.forEach((flag) => {\n        const { success } = flagsEnum.safeParse(flag);\n        if (!success) {\n          if (true) {\n            console.warn(`Invalid flag ${flag}, not applying.`);\n          }\n          return;\n        }\n        applied.push(`fl_${flag}`);\n      });\n      if (hasText) {\n        if (typeof text3 === \"string\") {\n          text3 = {\n            ...DEFAULT_TEXT_OPTIONS,\n            text: text3\n          };\n        }\n        const textTransformations = [];\n        if (typeof text3 === \"object\") {\n          const textOptions = Object.keys(text3).filter((key) => (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(text, key)).map((key) => {\n            const value = text3 && (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(text3, key) && text3[key];\n            return {\n              ...text[key],\n              key,\n              value,\n              order: text[key].order || 99\n            };\n          });\n          const sortedTextOptions = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.sortByKey)(textOptions, \"order\");\n          for (const textOption of sortedTextOptions) {\n            const { key, value, qualifier, location, converters } = textOption;\n            let textValue = value;\n            converters?.forEach(({ test, convert }) => {\n              if (!test(value)) return;\n              textValue = convert(value);\n            });\n            if (location === \"primary\") {\n              primary2.push(`${qualifier}_${textValue}`);\n            } else if (qualifier === \"self\") {\n              textTransformations.push(key);\n            } else if (qualifier) {\n              textTransformations.push(`${qualifier}_${textValue}`);\n            } else {\n              textTransformations.push(textValue);\n            }\n          }\n        }\n        const specialCharacters = {\n          \".\": \"%2E\",\n          \",\": \"%2C\",\n          \"/\": \"%2F\"\n        };\n        let layerText = text3?.text || \"\";\n        if (typeof layerText === \"string\") {\n          Object.keys(specialCharacters)?.forEach((character) => {\n            layerText = layerText?.replace(\n              character,\n              specialCharacters[character]\n            );\n          });\n        }\n        layerTransformation = `${layerTransformation}:${textTransformations.join(\n          \"_\"\n        )}:${layerText}`;\n      }\n      if (hasPosition) {\n        Object.keys(position2).forEach((key) => {\n          if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(position, key) || !(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(position2, key))\n            return;\n          const { qualifier, converters } = position[key];\n          const transformation = constructTransformation({\n            qualifier,\n            value: position2[key],\n            converters\n          });\n          if (transformation) {\n            applied.push(transformation);\n          }\n        });\n      }\n      if (primary2.length > 0) {\n        layerTransformation = `${layerTransformation},${primary2.join(\",\")}`;\n      }\n      layerTransformation = `${layerTransformation}/fl_layer_apply,fl_no_overflow`;\n      if (applied.length > 0) {\n        layerTransformation = `${layerTransformation},${applied.join(\",\")}`;\n      }\n      cldAsset.addTransformation(layerTransformation);\n    }\n    return {};\n  }\n};\n\n// src/plugins/preserve-transformations.ts\n\n\nvar preserveTransformationsProps = {\n  preserveTransformations: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().describe(\n    JSON.stringify({\n      text: \"Preserves transformations from a Cloudinary URL when using using a Cloudinary URL as the asset source (src).\"\n    })\n  ).optional()\n};\nvar preserveTransformationsPlugin = {\n  props: preserveTransformationsProps,\n  assetTypes: [\"image\", \"images\", \"video\", \"videos\"],\n  plugin: ({ cldAsset, options }) => {\n    const { preserveTransformations = false } = options;\n    if (preserveTransformations) {\n      try {\n        const transformations = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.getTransformations)(options.src).map((t) => t.join(\",\"));\n        transformations.flat().forEach((transformation) => {\n          cldAsset.addTransformation(transformation);\n        });\n      } catch (e) {\n        console.warn(`Failed to preserve transformations: ${e.message}`);\n      }\n    }\n    return {};\n  }\n};\n\n// src/plugins/raw-transformations.ts\n\nvar RawTransformationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.string();\nvar rawTransformationsProps = {\n  rawTransformations: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([RawTransformationSchema, zod__WEBPACK_IMPORTED_MODULE_0__.z.array(RawTransformationSchema)]).describe(\n    JSON.stringify({\n      text: \"Array of transformation parameters using the Cloudinary URL API to apply to an asset.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference\"\n    })\n  ).optional()\n};\nvar rawTransformationsPlugin = {\n  props: rawTransformationsProps,\n  assetTypes: [\"image\", \"images\", \"video\", \"videos\"],\n  plugin: ({ cldAsset, options }) => {\n    let { rawTransformations = [] } = options;\n    if (!Array.isArray(rawTransformations)) {\n      rawTransformations = [rawTransformations];\n    }\n    rawTransformations.forEach((transformation) => {\n      cldAsset.addTransformation(transformation);\n    });\n    return {};\n  }\n};\n\n// src/plugins/remove-background.ts\n\nvar removeBackgroundProps = {\n  removeBackground: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().describe(\n    JSON.stringify({\n      text: \"Removes the background of an image using the Cloudinary AI Background Removal Add-On (Required).\",\n      url: \"https://cloudinary.com/documentation/cloudinary_ai_background_removal_addon\"\n    })\n  ).optional()\n};\nvar removeBackgroundPlugin = {\n  props: removeBackgroundProps,\n  assetTypes: [\"image\", \"images\"],\n  plugin: (settings) => {\n    const { cldAsset, options } = settings;\n    const { removeBackground = false } = options;\n    if (removeBackground) {\n      cldAsset.effect(\"e_background_removal\");\n    }\n    return {};\n  }\n};\n\n// src/plugins/sanitize.ts\n\nvar sanitizeProps = {\n  sanitize: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().describe(\n    JSON.stringify({\n      text: \"Runs a sanitizer on SVG images.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#fl_sanitize\"\n    })\n  ).optional()\n};\nvar sanitizePlugin = {\n  props: sanitizeProps,\n  assetTypes: [\"image\", \"images\"],\n  plugin: ({ cldAsset, options }) => {\n    const { sanitize = true } = options;\n    const shouldApplySanitizer = sanitize && (options.format === \"svg\" || cldAsset.publicID.endsWith(\".svg\"));\n    if (shouldApplySanitizer) {\n      cldAsset.effect(\"fl_sanitize\");\n    }\n    return {};\n  }\n};\n\n// src/plugins/seo.ts\n\nvar seoProps = {\n  seoSuffix: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n    JSON.stringify({\n      text: \"Configures the URL to include an SEO-friendly suffix in the URL\",\n      url: \"https://cloudinary.com/documentation/advanced_url_delivery_options#seo_friendly_media_asset_urls\"\n    })\n  ).optional()\n};\nvar seoPlugin = {\n  props: seoProps,\n  assetTypes: [\"image\", \"images\", \"video\", \"videos\"],\n  plugin: ({ cldAsset, options }) => {\n    const { seoSuffix } = options;\n    if (typeof seoSuffix === \"string\") {\n      if (options.deliveryType === \"fetch\") {\n        console.warn(\n          \"SEO suffix is not supported with a delivery type of fetch\"\n        );\n      } else {\n        cldAsset.setSuffix(seoSuffix);\n      }\n    }\n    return {};\n  }\n};\n\n// src/plugins/underlays.ts\n\n\nvar underlayPositionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  angle: angle.schema.optional(),\n  gravity: gravity.schema.optional(),\n  x: x.schema.optional(),\n  y: y.schema.optional()\n});\nvar underlaySchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  appliedEffects: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({})).optional(),\n  appliedFlags: flags.schema.optional(),\n  effects: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({})).optional(),\n  crop: crop.schema.optional(),\n  flags: flags.schema.optional(),\n  height: height.schema.optional(),\n  position: underlayPositionSchema.optional(),\n  publicId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  type: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  url: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  width: width.schema.optional()\n});\nvar underlaysProps = {\n  underlay: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n    JSON.stringify({\n      text: \"Public ID of image that is applied under the base image.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#l_layer\"\n    })\n  ).optional(),\n  underlays: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(underlaySchema).describe(\n    JSON.stringify({\n      text: \"Image layers that are applied under the base image.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#l_layer\"\n    })\n  ).optional()\n};\nvar underlaysPlugin = {\n  props: underlaysProps,\n  assetTypes: [\"image\", \"images\", \"video\", \"videos\"],\n  plugin: ({ cldAsset, options }) => {\n    const { underlay, underlays = [] } = options;\n    const typeQualifier = \"u\";\n    if (Array.isArray(underlays)) {\n      underlays.forEach(applyUnderlay);\n    }\n    if (typeof underlay === \"string\") {\n      const underlayOptions = {\n        publicId: underlay,\n        crop: \"fill\",\n        width: \"1.0\",\n        height: \"1.0\",\n        flags: [\"relative\"]\n      };\n      applyUnderlay(underlayOptions);\n    }\n    function applyUnderlay({\n      publicId,\n      type,\n      position: position2,\n      effects: layerEffects = [],\n      flags: layerFlags = [],\n      appliedFlags = [],\n      ...options2\n    }) {\n      const hasPublicId = typeof publicId === \"string\";\n      const hasPosition = typeof position2 === \"object\";\n      if (!hasPublicId) {\n        console.warn(`An ${type} is missing a Public ID`);\n        return;\n      }\n      let layerTransformation = `${typeQualifier}_${publicId.replace(\n        /\\//g,\n        \":\"\n      )}`;\n      const primary2 = [];\n      const applied = [];\n      Object.keys(options2).forEach((key) => {\n        if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(primary, key)) return;\n        const { qualifier } = primary[key];\n        primary2.push(`${qualifier}_${options2[key]}`);\n      });\n      layerEffects.forEach((effect) => {\n        Object.keys(effect).forEach((key) => {\n          if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(primary, key)) return;\n          const { qualifier } = primary[key];\n          primary2.push(`${qualifier}_${effect[key]}`);\n        });\n      });\n      if (hasPosition) {\n        Object.keys(position2).forEach(\n          (key) => {\n            if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(position, key)) return;\n            const { qualifier } = position[key];\n            applied.push(`${qualifier}_${position2[key]}`);\n          }\n        );\n      }\n      const activeLayerFlags = Array.isArray(layerFlags) ? layerFlags : [layerFlags];\n      activeLayerFlags.forEach((flag) => {\n        const { success } = flagsEnum.safeParse(flag);\n        if (!success) {\n          if (true) {\n            console.warn(`Invalid flag ${flag}, not applying.`);\n          }\n          return;\n        }\n        primary2.push(`fl_${flag}`);\n      });\n      const activeAppliedFlags = Array.isArray(appliedFlags) ? appliedFlags : [appliedFlags];\n      activeAppliedFlags.forEach((flag) => {\n        const { success } = flagsEnum.safeParse(flag);\n        if (!success) {\n          if (true) {\n            console.warn(`Invalid flag ${flag}, not applying.`);\n          }\n          return;\n        }\n        applied.push(`fl_${flag}`);\n      });\n      layerTransformation = `${layerTransformation},${primary2.join(\",\")}`;\n      layerTransformation = `${layerTransformation}/fl_layer_apply,fl_no_overflow`;\n      if (applied.length > 0) {\n        layerTransformation = `${layerTransformation},${applied.join(\",\")}`;\n      }\n      cldAsset.addTransformation(layerTransformation);\n    }\n    return {};\n  }\n};\n\n// src/plugins/version.ts\n\nvar versionProps = {\n  version: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.number(), zod__WEBPACK_IMPORTED_MODULE_0__.z.string()]).describe(\n    JSON.stringify({\n      text: \"Custom version number to apply to asset URL.\",\n      url: \"https://cloudinary.com/documentation/advanced_url_delivery_options#asset_versions\"\n    })\n  ).optional()\n};\nvar versionPlugin = {\n  props: versionProps,\n  assetTypes: [\"image\", \"images\", \"video\", \"videos\"],\n  plugin: ({ cldAsset, options }) => {\n    const { version } = options;\n    if (typeof version === \"string\" || typeof version === \"number\") {\n      cldAsset.setVersion(`${version}`.replace(\"v\", \"\"));\n    }\n    return {};\n  }\n};\n\n// src/types/asset.ts\nvar assetOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  assetType: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().default(\"image\").describe(\n    JSON.stringify({\n      text: \"The type of asset to deliver.\",\n      url: \"https://cloudinary.com/documentation/image_transformations#transformation_url_structure\"\n    })\n  ).optional(),\n  deliveryType: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().default(\"upload\").describe(\n    JSON.stringify({\n      text: \"Delivery method of the asset.\",\n      url: \"https://cloudinary.com/documentation/image_transformations#delivery_types\"\n    })\n  ).optional(),\n  dpr: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number()]).describe(\n    JSON.stringify({\n      text: \"Delivery method of the asset.\",\n      url: \"https://cloudinary.com/documentation/image_transformations#delivery_types\"\n    })\n  ).optional(),\n  format: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().default(\"auto\").describe(\n    JSON.stringify({\n      text: \"Converts (if necessary) and delivers an asset in the specified format.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#f_format\"\n    })\n  ).optional(),\n  height: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number()]).describe(\n    JSON.stringify({\n      text: \"Height of the given asset.\"\n    })\n  ).optional(),\n  quality: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number(), zod__WEBPACK_IMPORTED_MODULE_0__.z.string()]).default(\"auto\").describe(\n    JSON.stringify({\n      text: \"Quality of the delivered asset\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#q_quality\"\n    })\n  ).optional(),\n  src: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n    JSON.stringify({\n      text: \"Cloudinary Public ID or versioned Cloudinary URL (/v1234/)\"\n    })\n  ),\n  strictTransformations: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().describe(\n    JSON.stringify({\n      text: \"Gives you the ability to have more control over what transformations are permitted to be used from your Cloudinary account.\",\n      url: \"https://cloudinary.com/documentation/control_access_to_media#strict_transformations\"\n    })\n  ).optional(),\n  width: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.string(), zod__WEBPACK_IMPORTED_MODULE_0__.z.number()]).describe(\n    JSON.stringify({\n      text: \"Width of the given asset.\"\n    })\n  ).optional(),\n  // Spreading plugins instead of extend or merge to avoid excessive schema warning\n  // https://github.com/microsoft/TypeScript/issues/34933#issuecomment-1772787785\n  ...croppingProps,\n  ...effectsProps,\n  ...flagsProps,\n  ...namedTransformationsProps,\n  ...overlaysProps,\n  ...preserveTransformationsProps,\n  ...rawTransformationsProps,\n  ...removeBackgroundProps,\n  ...sanitizeProps,\n  ...seoProps,\n  ...underlaysProps,\n  ...versionProps\n});\n\n// src/types/image.ts\n\n\n// src/plugins/default-image.ts\n\n\nvar defaultImageProps = {\n  defaultImage: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n    JSON.stringify({\n      text: \"Configures the default image to use in case the given public ID is not available. Must include file extension.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#d_default_image\"\n    })\n  ).optional()\n};\nvar defaultImagePlugin = {\n  props: defaultImageProps,\n  assetTypes: [\"image\", \"images\"],\n  plugin: (settings) => {\n    const { cldAsset, options } = settings;\n    const { defaultImage } = options;\n    if (typeof defaultImage === \"string\") {\n      if (!(0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.getFormat)(defaultImage)) {\n        console.warn(\n          `The defaultImage prop may be missing a format and must include it along with the public ID. (Ex: myimage.jpg)`\n        );\n      }\n      const defaultImageId = defaultImage.replace(/\\//g, \":\");\n      cldAsset.addTransformation(`d_${defaultImageId}`);\n    }\n    return {};\n  }\n};\n\n// src/plugins/enhance.ts\n\nvar enhanceProps = {\n  enhance: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().describe(\n    JSON.stringify({\n      text: \"Uses AI to analyze an image and make adjustments to enhance the appeal of the image.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#e_enhance\"\n    })\n  ).optional()\n};\nvar enhancePlugin = {\n  props: enhanceProps,\n  assetTypes: [\"image\", \"images\"],\n  plugin: (settings) => {\n    const { cldAsset, options } = settings;\n    const { enhance = false } = options;\n    if (enhance) {\n      cldAsset.effect(\"e_enhance\");\n    }\n    return {};\n  }\n};\n\n// src/plugins/extract.ts\n\nvar extractProps = {\n  extract: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    prompt.schema.optional(),\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.array(prompt.schema).optional(),\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      invert: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false).optional(),\n      mode: extractMode.schema.optional(),\n      multiple: multiple.schema.default(false).optional(),\n      prompt: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([prompt.schema, zod__WEBPACK_IMPORTED_MODULE_0__.z.array(prompt.schema)]).optional()\n    })\n  ]).describe(\n    JSON.stringify({\n      text: \"Extracts an area or multiple areas of an image, described in natural language.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#e_extract\"\n    })\n  ).optional()\n};\nvar extractPlugin = {\n  props: extractProps,\n  assetTypes: [\"image\", \"images\"],\n  plugin: (settings) => {\n    const { cldAsset, options } = settings;\n    const { extract } = options;\n    if (!extract || typeof extract === \"undefined\") return {};\n    const properties = [];\n    if (typeof extract === \"string\") {\n      properties.push(`prompt_${extract}`);\n    } else if (Array.isArray(extract)) {\n      properties.push(`prompt_${formatPrompts(extract)}`);\n    } else if (typeof extract === \"object\" && !Array.isArray(extract)) {\n      const prompt2 = formatPrompts(extract.prompt);\n      if (prompt2) {\n        properties.push(`prompt_${prompt2}`);\n      }\n      if (extract.invert === true) {\n        properties.push(\"invert_true\");\n      }\n      if (typeof extract.mode === \"string\") {\n        properties.push(`mode_${extract.mode}`);\n      }\n      if (extract.multiple === true) {\n        properties.push(\"multiple_true\");\n      }\n    }\n    if (properties.length > 0) {\n      const transformation = `e_extract:${properties.join(\";\")}`;\n      cldAsset.addTransformation(transformation);\n    }\n    return {};\n  }\n};\nfunction formatPrompts(prompt2) {\n  if (typeof prompt2 === \"string\") return prompt2;\n  if (Array.isArray(prompt2)) {\n    return `(${prompt2.filter((prompt3) => typeof prompt3 === \"string\").join(\";\")})`;\n  }\n  return void 0;\n}\n\n// src/plugins/fill-background.ts\n\nvar defaultCrop = \"pad\";\nvar fillBackgroundProps = {\n  fillBackground: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean(),\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      crop: crop.schema.optional(),\n      gravity: gravity.schema.optional(),\n      prompt: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n    })\n  ]).describe(\n    JSON.stringify({\n      text: \"Uses Generative Fill to extended padded image with AI\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#b_gen_fill\"\n    })\n  ).optional()\n};\nvar fillBackgroundPlugin = {\n  props: fillBackgroundProps,\n  assetTypes: [\"image\", \"images\"],\n  plugin: (settings) => {\n    const { cldAsset, options } = settings;\n    const { fillBackground } = options;\n    if (typeof fillBackground === \"undefined\") return {};\n    const width2 = normalizeNumberParameter(options.width);\n    const height2 = normalizeNumberParameter(options.height);\n    const hasDefinedDimensions = typeof height2 === \"number\" && typeof width2 === \"number\";\n    let aspectRatio2 = options.aspectRatio;\n    if (!aspectRatio2 && hasDefinedDimensions) {\n      aspectRatio2 = `${width2}:${height2}`;\n    }\n    if (!aspectRatio2) {\n      if (true) {\n        console.warn(\n          `Could not determine aspect ratio based on available options to use fillBackground. Please specify width and height or an aspect ratio.`\n        );\n      }\n      return {};\n    }\n    if (fillBackground === true) {\n      const properties = [\n        \"b_gen_fill\",\n        `ar_${aspectRatio2}`,\n        `c_${defaultCrop}`\n      ];\n      cldAsset.addTransformation(properties.join(\",\"));\n    } else if (typeof fillBackground === \"object\") {\n      const { crop: crop2 = defaultCrop, gravity: gravity2, prompt: prompt2 } = fillBackground;\n      const properties = [`ar_${aspectRatio2}`, `c_${crop2}`];\n      if (typeof prompt2 === \"string\") {\n        properties.unshift(`b_gen_fill:${prompt2}`);\n      } else {\n        properties.unshift(`b_gen_fill`);\n      }\n      if (typeof gravity2 === \"string\") {\n        properties.push(`g_${gravity2}`);\n      }\n      cldAsset.addTransformation(properties.join(\",\"));\n    }\n    return {};\n  }\n};\n\n// src/plugins/recolor.ts\n\nvar imageOptionsRecolorPromptSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n  zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string())\n]);\nvar imageOptionsRecolorSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  prompt: imageOptionsRecolorPromptSchema.optional(),\n  to: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n  multiple: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n});\nvar recolorProps = {\n  recolor: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([imageOptionsRecolorPromptSchema, imageOptionsRecolorSchema]).describe(\n    JSON.stringify({\n      text: \"Uses generative AI to recolor parts of your image, maintaining the relative shading.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#e_gen_recolor\"\n    })\n  ).optional()\n};\nvar recolorPlugin = {\n  props: recolorProps,\n  assetTypes: [\"image\", \"images\"],\n  plugin: (settings) => {\n    const { cldAsset, options } = settings;\n    const { recolor } = options;\n    const recolorOptions = {\n      prompt: void 0,\n      \"to-color\": void 0,\n      multiple: void 0\n    };\n    if (Array.isArray(recolor)) {\n      if (Array.isArray(recolor[0])) {\n        recolorOptions.prompt = promptArrayToString(recolor[0]);\n      } else {\n        recolorOptions.prompt = recolor[0];\n      }\n      if (typeof recolor[1] === \"string\") {\n        recolorOptions[\"to-color\"] = recolor[1];\n      }\n    } else if (typeof recolor === \"object\") {\n      if (typeof recolor.prompt === \"string\") {\n        recolorOptions.prompt = recolor.prompt;\n      } else if (Array.isArray(recolor.prompt)) {\n        recolorOptions.prompt = promptArrayToString(recolor.prompt);\n      }\n      if (typeof recolor.to === \"string\") {\n        recolorOptions[\"to-color\"] = recolor.to;\n      }\n      if (recolor.multiple === true) {\n        recolorOptions.multiple = `true`;\n      }\n    }\n    const transformation = Object.entries(recolorOptions).filter(([, value]) => !!value).map(([key, value]) => `${key}_${value}`).join(\";\");\n    if (transformation) {\n      cldAsset.addTransformation(`e_gen_recolor:${transformation}`);\n    }\n    return {};\n  }\n};\n\n// src/plugins/remove.ts\n\nvar imageOptionsRemovePromptSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n  zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n  zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string())\n]);\nvar imageOptionsRemoveSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  prompt: imageOptionsRemovePromptSchema.optional(),\n  region: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.number()), zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.number()))]).optional(),\n  multiple: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional(),\n  removeShadow: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n});\nvar removeProps = {\n  remove: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([imageOptionsRemovePromptSchema, imageOptionsRemoveSchema]).describe(\n    JSON.stringify({\n      text: \"Applies zooming and/or panning to an image, resulting in a video or animated image.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#e_zoompan\"\n    })\n  ).optional()\n};\nvar removePlugin = {\n  props: removeProps,\n  assetTypes: [\"image\", \"images\"],\n  plugin: ({ cldAsset, options }) => {\n    const { remove } = options;\n    const removeOptions = {\n      prompt: void 0,\n      region: void 0,\n      multiple: void 0,\n      \"remove-shadow\": void 0\n    };\n    if (typeof remove === \"string\") {\n      removeOptions.prompt = remove;\n    } else if (Array.isArray(remove)) {\n      removeOptions.prompt = promptArrayToString(remove);\n    } else if (typeof remove === \"object\") {\n      const hasPrompt = typeof remove.prompt === \"string\" || Array.isArray(remove.prompt);\n      const hasRegion = Array.isArray(remove.region);\n      if (hasPrompt && hasRegion) {\n        throw new Error(\n          \"Invalid remove options: you can not have both a prompt and a region. More info: https://cloudinary.com/documentation/transformation_reference#e_gen_remove\"\n        );\n      }\n      if (typeof remove.prompt === \"string\") {\n        removeOptions.prompt = remove.prompt;\n      } else if (Array.isArray(remove.prompt)) {\n        removeOptions.prompt = promptArrayToString(remove.prompt);\n      }\n      if (Array.isArray(remove.region)) {\n        removeOptions.region = regionArrayToString(remove.region);\n      }\n      if (remove.multiple === true) {\n        removeOptions.multiple = `true`;\n      }\n      if (remove.removeShadow === true) {\n        removeOptions[\"remove-shadow\"] = `true`;\n      }\n    }\n    const transformation = Object.entries(removeOptions).filter(([, value]) => !!value).map(([key, value]) => `${key}_${value}`).join(\";\");\n    if (transformation) {\n      cldAsset.addTransformation(`e_gen_remove:${transformation}`);\n    }\n    return {};\n  }\n};\nfunction regionArrayToString(regionArray) {\n  const indexes = {\n    0: \"x\",\n    1: \"y\",\n    2: \"w\",\n    3: \"h\"\n  };\n  const regionString = regionArray.map((region, index) => {\n    if (Array.isArray(region)) {\n      return regionArrayToString(region);\n    }\n    const key = indexes[index];\n    return `${key}_${region}`;\n  }).join(\";\");\n  return `(${regionString})`;\n}\n\n// src/plugins/replace-background.ts\n\nvar replaceBackgroundProps = {\n  replaceBackground: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean(),\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      seed: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().optional(),\n      prompt: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n    })\n  ]).describe(\n    JSON.stringify({\n      text: \"Replaces the background of an image with an AI-generated background.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#e_gen_background_replace\"\n    })\n  ).optional()\n};\nvar replaceBackgroundPlugin = {\n  props: replaceBackgroundProps,\n  assetTypes: [\"image\", \"images\"],\n  plugin: (settings) => {\n    const { cldAsset, options } = settings;\n    const { replaceBackground } = options;\n    if (!replaceBackground || typeof replaceBackground === \"undefined\") return {};\n    const properties = [];\n    if (typeof replaceBackground === \"object\") {\n      if (typeof replaceBackground.prompt !== \"undefined\") {\n        properties.push(`prompt_${replaceBackground.prompt}`);\n      }\n      if (typeof replaceBackground.seed === \"number\") {\n        properties.push(`seed_${replaceBackground.seed}`);\n      }\n    } else if (typeof replaceBackground === \"string\") {\n      properties.push(`prompt_${replaceBackground}`);\n    }\n    let transformation = \"e_gen_background_replace\";\n    if (properties.length > 0) {\n      transformation = `${transformation}:${properties.join(\";\")}`;\n    }\n    cldAsset.addTransformation(transformation);\n    return {};\n  }\n};\n\n// src/plugins/replace.ts\n\nvar replaceProps = {\n  replace: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string()),\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()),\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      to: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      from: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n      preserveGeometry: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().optional()\n    })\n  ]).describe(\n    JSON.stringify({\n      text: \"Uses generative AI to replace parts of your image with something else.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#e_gen_replace\"\n    })\n  ).optional()\n};\nvar replacePlugin = {\n  props: replaceProps,\n  assetTypes: [\"image\", \"images\"],\n  plugin: ({ cldAsset, options }) => {\n    const { replace = null } = options;\n    if (replace) {\n      let from, to, preserveGeometry = false;\n      if (Array.isArray(replace)) {\n        from = replace[0];\n        to = replace[1];\n        preserveGeometry = replace[2] || false;\n      } else {\n        from = replace.from;\n        to = replace.to;\n        preserveGeometry = replace.preserveGeometry || false;\n      }\n      const properties = [`e_gen_replace:from_${from}`, `to_${to}`];\n      if (preserveGeometry) {\n        properties.push(`preserve-geometry_${preserveGeometry}`);\n      }\n      cldAsset.effect(properties.join(\";\"));\n    }\n    return {};\n  }\n};\n\n// src/plugins/restore.ts\n\nvar restoreProps = {\n  restore: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().describe(\n    JSON.stringify({\n      text: \"Uses generative AI to restore details in poor quality images or images that may have become degraded through repeated processing and compression.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#e_gen_restore\"\n    })\n  ).optional()\n};\nvar restorePlugin = {\n  props: restoreProps,\n  assetTypes: [\"image\", \"images\"],\n  plugin: ({ cldAsset, options }) => {\n    const { restore = false } = options;\n    if (restore) {\n      cldAsset.effect(\"e_gen_restore\");\n    }\n    return {};\n  }\n};\n\n// src/plugins/zoompan.ts\n\nvar zoompanProps = {\n  zoompan: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean(),\n    zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n      loop: effects.loop.schema.optional(),\n      options: zod__WEBPACK_IMPORTED_MODULE_0__.z.string()\n    })\n  ]).describe(\n    JSON.stringify({\n      text: \"Applies zooming and/or panning to an image, resulting in a video or animated image.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#e_zoompan\"\n    })\n  ).optional()\n};\nvar zoompanPlugin = {\n  props: zoompanProps,\n  assetTypes: [\"image\", \"images\"],\n  plugin: ({ cldAsset, options }) => {\n    const { zoompan = false } = options;\n    const overrides = {\n      format: void 0\n    };\n    if (zoompan === true) {\n      cldAsset.effect(\"e_zoompan\");\n    } else if (typeof zoompan === \"string\") {\n      if (zoompan === \"loop\") {\n        cldAsset.effect(\"e_zoompan\");\n        cldAsset.effect(\"e_loop\");\n      } else {\n        cldAsset.effect(`e_zoompan:${zoompan}`);\n      }\n    } else if (typeof zoompan === \"object\") {\n      let zoompanEffect = \"e_zoompan\";\n      if (typeof zoompan.options === \"string\") {\n        zoompanEffect = `${zoompanEffect}:${zoompan.options}`;\n      }\n      cldAsset.effect(zoompanEffect);\n      let loopEffect;\n      if (zoompan.loop === true) {\n        loopEffect = \"e_loop\";\n      } else if (typeof zoompan.loop === \"string\" || typeof zoompan.loop === \"number\") {\n        loopEffect = `e_loop:${zoompan.loop}`;\n      }\n      if (loopEffect) {\n        cldAsset.effect(loopEffect);\n      }\n    }\n    if (zoompan !== false) {\n      overrides.format = \"auto:animated\";\n    }\n    return {\n      options: overrides\n    };\n  }\n};\n\n// src/types/image.ts\nvar imageOptionsSchema = assetOptionsSchema.merge(\n  zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    // Spreading plugins instead of extend or merge to avoid excessive schema warning\n    // https://github.com/microsoft/TypeScript/issues/34933#issuecomment-1772787785\n    ...defaultImageProps,\n    ...enhanceProps,\n    ...extractProps,\n    ...fillBackgroundProps,\n    ...recolorProps,\n    ...removeProps,\n    ...replaceProps,\n    ...replaceBackgroundProps,\n    ...restoreProps,\n    ...zoompanProps\n  })\n);\n\n// src/types/video.ts\n\n\n// src/plugins/abr.ts\n\nvar abrProps = {\n  streamingProfile: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().describe(\n    JSON.stringify({\n      text: \"The streaming profile to apply when delivering a video using adaptive bitrate streaming.\",\n      url: \"https://cloudinary.com/documentation/transformation_reference#sp_streaming_profile\"\n    })\n  ).optional()\n};\nvar abrPlugin = {\n  props: abrProps,\n  assetTypes: [\"video\", \"videos\"],\n  plugin: (settings) => {\n    const { cldAsset, options } = settings;\n    const { streamingProfile } = options;\n    if (typeof streamingProfile === \"string\") {\n      cldAsset.addTransformation(`sp_${streamingProfile}`);\n    }\n    return {};\n  }\n};\n\n// src/types/video.ts\nvar videoOptionsSchema = assetOptionsSchema.merge(\n  zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    // Spreading plugins instead of extend or merge to avoid excessive schema warning\n    // https://github.com/microsoft/TypeScript/issues/34933#issuecomment-1772787785\n    ...abrProps\n  })\n);\n\n// src/lib/cloudinary.ts\n\n\n\n\n// src/types/analytics.ts\n\nvar analyticsOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.any();\n\n// src/types/config.ts\n\nvar configOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.any();\n\n// src/lib/cloudinary.ts\nvar transformationPlugins = [\n  // Some features *must* be the first transformation applied\n  // thus their plugins *must* come first in the chain\n  enhancePlugin,\n  extractPlugin,\n  recolorPlugin,\n  removeBackgroundPlugin,\n  removePlugin,\n  replacePlugin,\n  replaceBackgroundPlugin,\n  restorePlugin,\n  // Cropping needs to be before any other general transformations\n  // as it provides the option of 2-step resizing where someone\n  // can resize the \"base\" canvas as well as the final resize\n  // mechanism commonly used for responsive resizing\n  croppingPlugin,\n  // Raw transformations should always come before\n  // other arguments to avoid conflicting with\n  // added options via the component\n  preserveTransformationsPlugin,\n  rawTransformationsPlugin,\n  abrPlugin,\n  defaultImagePlugin,\n  effectsPlugin,\n  fillBackgroundPlugin,\n  flagsPlugin,\n  overlaysPlugin,\n  sanitizePlugin,\n  namedTransformationsPlugin,\n  seoPlugin,\n  underlaysPlugin,\n  versionPlugin,\n  zoompanPlugin\n];\nvar constructUrlOptionsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.union([imageOptionsSchema, videoOptionsSchema]).describe(\n  JSON.stringify({\n    text: \"Asset options (Image or Video) that define delivery URL including public ID and transformations.\",\n    path: \"/url-loader/assetoptions\"\n  })\n);\nvar constructUrlPropsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n  analytics: zod__WEBPACK_IMPORTED_MODULE_0__.z.union([analyticsOptionsSchema, zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean()]).describe(\n    JSON.stringify({\n      text: \"Tech, dependency, and feature identifiers for tracking SDK usage related to Cloudinary.\",\n      path: \"/url-loader/analyticsoptions\"\n    })\n  ).optional(),\n  config: configOptionsSchema.describe(\n    JSON.stringify({\n      text: \"Configuration parameters for environment and Cloudinary account.\",\n      url: \"https://cloudinary.com/documentation/cloudinary_sdks#configuration_parameters\",\n      path: \"/url-loader/analyticsoptions\"\n    })\n  ).optional(),\n  options: constructUrlOptionsSchema\n});\nfunction constructCloudinaryUrl({\n  options,\n  config = {},\n  analytics\n}) {\n  if (analytics === false) {\n    if (typeof config?.url === \"undefined\") {\n      config.url = {};\n    }\n    config.url.analytics = false;\n  }\n  const cld = new _cloudinary_url_gen__WEBPACK_IMPORTED_MODULE_2__.Cloudinary(config);\n  if (typeof options?.src !== \"string\") {\n    throw Error(\n      `Failed to construct Cloudinary URL: Missing source (src) in options.`\n    );\n  }\n  if (!options?.assetType) {\n    options.assetType = \"image\";\n  }\n  const propsCheck = [];\n  transformationPlugins.forEach(({ props }) => {\n    const pluginProps = Object.keys(props);\n    pluginProps.forEach((prop) => {\n      if (propsCheck.includes(prop)) {\n        throw new Error(`Option ${prop} already exists!`);\n      }\n      propsCheck.push(prop);\n    });\n  });\n  const parsedOptions = {};\n  let publicId;\n  if (typeof options.src === \"string\" && /^https?:\\/\\//.test(options.src)) {\n    try {\n      const parts = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.parseUrl)(options.src);\n      publicId = parts?.publicId;\n      parsedOptions.seoSuffix = parts?.seoSuffix;\n      parsedOptions.version = parts?.version;\n    } catch (e) {\n    }\n  }\n  if (!publicId) {\n    publicId = options.src;\n  }\n  Object.keys(parsedOptions).forEach(\n    (key) => {\n      if ((0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_1__.objectHasKey)(options, key)) return;\n      options[key] = parsedOptions[key];\n    }\n  );\n  options.version ?? (options.version = 1);\n  let cldAsset = void 0;\n  if ([\"image\", \"images\"].includes(options.assetType)) {\n    cldAsset = cld.image(publicId);\n  } else if ([\"video\", \"videos\"].includes(options.assetType)) {\n    cldAsset = cld.video(publicId);\n  }\n  if (typeof cldAsset === \"undefined\") {\n    throw new Error(\"Invalid asset type.\");\n  }\n  const pluginEffects = {};\n  transformationPlugins.forEach(\n    ({ plugin, assetTypes, props, strict }) => {\n      const supportedAssetType = options?.assetType !== void 0 && assetTypes.includes(options.assetType);\n      const pluginProps = Object.keys(props);\n      const optionsKeys = Object.keys(options);\n      const attemptedUse = pluginProps.map((prop) => optionsKeys.includes(prop)).filter((isUsed) => !!isUsed).length > 0;\n      if (!supportedAssetType) {\n        if (attemptedUse) {\n          console.warn(\n            `One of the following props [${pluginProps.join(\n              \", \"\n            )}] was used with an unsupported asset type [${options?.assetType}]`\n          );\n        }\n        return;\n      }\n      if (options.strictTransformations && !strict) {\n        if (attemptedUse) {\n          console.warn(\n            `One of the following props [${pluginProps.join(\n              \", \"\n            )}] was used that is not supported with Strict Transformations.`\n          );\n        }\n        return;\n      }\n      const results = plugin({\n        cldAsset,\n        options\n      });\n      const { options: pluginOptions } = results || { options: void 0 };\n      Object.assign(pluginEffects, pluginOptions);\n    }\n  );\n  if (typeof pluginEffects.resize === \"string\") {\n    cldAsset.addTransformation(pluginEffects.resize);\n  }\n  cldAsset.setDeliveryType(options?.deliveryType || \"upload\");\n  if (!options.strictTransformations) {\n    if (options?.dpr) {\n      let dpr = options.dpr;\n      if (typeof dpr === \"number\") {\n        dpr = dpr.toFixed(1);\n      }\n      cldAsset.addTransformation(`dpr_${dpr}`);\n    }\n    const defaultFormat = options?.format === \"default\";\n    const rawContainsFormat = searchAssetRawTransformations(\"f_\", cldAsset, {\n      matchType: \"startsWith\"\n    });\n    const rawContainsFormatAndExplicit = rawContainsFormat && typeof options?.format !== \"undefined\";\n    if (pluginEffects?.format || !defaultFormat && (!rawContainsFormat || rawContainsFormatAndExplicit)) {\n      cldAsset.format(options?.format || pluginEffects?.format || \"auto\");\n    }\n    const defaultQuality = options?.quality === \"default\";\n    const rawContainsQuality = searchAssetRawTransformations(\"q_\", cldAsset, {\n      matchType: \"startsWith\"\n    });\n    const rawContainsQualityAndExplicit = rawContainsQuality && typeof options?.quality !== \"undefined\";\n    if (!defaultQuality && (!rawContainsQuality || rawContainsQualityAndExplicit)) {\n      cldAsset.quality(options?.quality || \"auto\");\n    }\n  }\n  return cldAsset.toURL({\n    trackedAnalytics: analytics\n  });\n}\nfunction searchAssetRawTransformations(query, asset, options) {\n  if (typeof asset.transformation === \"undefined\") return;\n  const { matchType = \"includes\" } = options || {};\n  const transformations = asset.transformation.actions.flatMap(\n    (transformation) => {\n      return transformation.toString().split(\"/\").flatMap((seg) => seg.split(\",\"));\n    }\n  );\n  const matches = transformations.filter((transformation) => {\n    if (matchType === \"startsWith\") {\n      return transformation.startsWith(query);\n    } else {\n      return transformation.includes(query);\n    }\n  });\n  return matches.length > 0;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cloudinary-util/url-loader/dist/chunk-L3YIXMGG.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cloudinary-util/url-loader/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@cloudinary-util/url-loader/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UPLOAD_WIDGET_EVENTS: () => (/* binding */ UPLOAD_WIDGET_EVENTS),\n/* harmony export */   constructCloudinaryUrl: () => (/* reexport safe */ _chunk_L3YIXMGG_js__WEBPACK_IMPORTED_MODULE_1__.constructCloudinaryUrl),\n/* harmony export */   effects: () => (/* reexport safe */ _chunk_L3YIXMGG_js__WEBPACK_IMPORTED_MODULE_1__.effects),\n/* harmony export */   generateSignatureCallback: () => (/* binding */ generateSignatureCallback),\n/* harmony export */   generateUploadWidgetResultCallback: () => (/* binding */ generateUploadWidgetResultCallback),\n/* harmony export */   getUploadWidgetOptions: () => (/* binding */ getUploadWidgetOptions),\n/* harmony export */   getVideoPlayerOptions: () => (/* binding */ getVideoPlayerOptions),\n/* harmony export */   position: () => (/* reexport safe */ _chunk_L3YIXMGG_js__WEBPACK_IMPORTED_MODULE_1__.position),\n/* harmony export */   primary: () => (/* reexport safe */ _chunk_L3YIXMGG_js__WEBPACK_IMPORTED_MODULE_1__.primary),\n/* harmony export */   text: () => (/* reexport safe */ _chunk_L3YIXMGG_js__WEBPACK_IMPORTED_MODULE_1__.text),\n/* harmony export */   transformationPlugins: () => (/* reexport safe */ _chunk_L3YIXMGG_js__WEBPACK_IMPORTED_MODULE_1__.transformationPlugins)\n/* harmony export */ });\n/* harmony import */ var _chunk_L3YIXMGG_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-L3YIXMGG.js */ \"(ssr)/./node_modules/@cloudinary-util/url-loader/dist/chunk-L3YIXMGG.js\");\n/* harmony import */ var _cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cloudinary-util/util */ \"(ssr)/./node_modules/@cloudinary-util/url-loader/node_modules/@cloudinary-util/util/dist/index.js\");\n\n\n// src/lib/upload-widget.ts\nfunction getUploadWidgetOptions({ uploadSignature, ...options }, config) {\n  const signed = typeof uploadSignature === \"function\";\n  const { cloudName, apiKey } = config?.cloud || {};\n  if (!cloudName) {\n    throw new Error(\"A Cloudinary Cloud name is required, please make sure your environment variable is set and configured in your environment.\");\n  }\n  if (signed && !apiKey) {\n    throw new Error(\"A Cloudinary API Key is required for signed requests, please make sure your environment variable is set and configured in your environment.\");\n  }\n  if (!signed && !options.uploadPreset) {\n    throw new Error(\"A Cloudinary Upload Preset is required for unsigned uploads. Please specify an uploadPreset or configure signed uploads.\");\n  }\n  const uploadOptions = {\n    cloudName,\n    apiKey,\n    ...options\n  };\n  if (signed) {\n    uploadOptions.uploadSignature = uploadSignature;\n  }\n  return uploadOptions;\n}\nvar UPLOAD_WIDGET_EVENTS = {\n  \"abort\": \"onAbort\",\n  \"batch-cancelled\": \"onBatchCancelled\",\n  \"close\": \"onClose\",\n  \"display-changed\": \"onDisplayChanged\",\n  \"publicid\": \"onPublicId\",\n  \"queues-end\": \"onQueuesEnd\",\n  \"queues-start\": \"onQueuesStart\",\n  \"retry\": \"onRetry\",\n  \"show-completed\": \"onShowCompleted\",\n  \"source-changed\": \"onSourceChanged\",\n  \"success\": \"onSuccess\",\n  \"tags\": \"onTags\",\n  \"upload-added\": \"onUploadAdded\"\n};\nfunction generateUploadWidgetResultCallback(options) {\n  return function resultCallback(error, uploadResult) {\n    if (error) {\n      if (typeof options.onError === \"function\") {\n        options.onError(error, uploadResult);\n      }\n    }\n    if (typeof options.onResult === \"function\") {\n      options.onResult(uploadResult);\n    }\n    const widgetEvent = typeof uploadResult?.event === \"string\" && UPLOAD_WIDGET_EVENTS[uploadResult.event];\n    if (typeof widgetEvent === \"string\" && typeof options[widgetEvent] === \"function\") {\n      const callback = options[widgetEvent];\n      callback(uploadResult);\n    }\n  };\n}\n\n// src/lib/upload.ts\nfunction generateSignatureCallback({ signatureEndpoint, fetch: fetcher }) {\n  return function generateSignature(callback, paramsToSign) {\n    if (typeof signatureEndpoint === \"undefined\") {\n      throw Error(\"Failed to generate signature: signatureEndpoint property undefined.\");\n    }\n    if (typeof fetcher === \"undefined\") {\n      throw Error(\"Failed to generate signature: fetch property undefined.\");\n    }\n    fetcher(signatureEndpoint, {\n      method: \"POST\",\n      body: JSON.stringify({\n        paramsToSign\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then((response) => response.json()).then((result) => {\n      callback(result.signature);\n    }).catch((error) => {\n      callback(null, error);\n    });\n  };\n}\n\n// src/lib/video-player.ts\n\nfunction getVideoPlayerOptions(options, config) {\n  const {\n    autoplay,\n    controls = true,\n    language,\n    languages,\n    logo = true,\n    loop = false,\n    muted = false,\n    poster,\n    src,\n    transformation,\n    quality = \"auto\",\n    ...otherCldVidPlayerOptions\n  } = options;\n  const { cloudName } = config?.cloud || {};\n  const { secureDistribution, privateCdn } = config?.url || {};\n  if (!cloudName) {\n    throw new Error(\n      \"A Cloudinary Cloud name is required, please make sure your environment variable is set and configured in your environment.\"\n    );\n  }\n  let publicId = src || \"\";\n  if (publicId.startsWith(\"http\")) {\n    try {\n      const parts = (0,_cloudinary_util_util__WEBPACK_IMPORTED_MODULE_0__.parseUrl)(src);\n      if (typeof parts?.publicId === \"string\") {\n        publicId = parts?.publicId;\n      }\n    } catch (e) {\n    }\n  }\n  if (!publicId) {\n    throw new Error(\n      \"Video Player requires a src, please make sure to configure your src as a public ID or Cloudinary URL.\"\n    );\n  }\n  const playerTransformations = Array.isArray(transformation) ? transformation : [transformation];\n  playerTransformations.unshift({\n    quality\n  });\n  let logoOptions = {};\n  if (typeof logo === \"boolean\") {\n    logoOptions.showLogo = logo;\n  } else if (typeof logo === \"object\") {\n    logoOptions = {\n      ...logoOptions,\n      showLogo: true,\n      logoImageUrl: logo.imageUrl,\n      logoOnclickUrl: logo.onClickUrl\n    };\n  }\n  let autoplayValue = false;\n  let autoplayModeValue = void 0;\n  if (typeof autoplay === \"boolean\" || autoplay === \"true\" || autoplay === \"false\") {\n    autoplayValue = autoplay;\n  }\n  if (typeof autoplay === \"string\" && autoplay !== \"true\" && autoplay !== \"false\") {\n    autoplayModeValue = autoplay;\n  }\n  const playerOptions = {\n    cloud_name: cloudName,\n    privateCdn,\n    secureDistribution,\n    autoplayMode: autoplayModeValue,\n    autoplay: autoplayValue,\n    controls,\n    language,\n    languages,\n    loop,\n    muted,\n    publicId,\n    transformation: playerTransformations,\n    ...logoOptions,\n    ...otherCldVidPlayerOptions\n  };\n  if (playerOptions.width && playerOptions.height && !playerOptions.aspectRatio) {\n    playerOptions.aspectRatio = `${playerOptions.width}:${playerOptions.height}`;\n  }\n  if (typeof poster === \"string\") {\n    playerOptions.posterOptions = {\n      publicId: poster\n    };\n  } else if (typeof poster === \"object\") {\n    if (typeof poster.src !== \"string\") {\n      playerOptions.posterOptions = {\n        publicId: (0,_chunk_L3YIXMGG_js__WEBPACK_IMPORTED_MODULE_1__.constructCloudinaryUrl)({\n          options: {\n            ...poster,\n            src: publicId,\n            assetType: \"video\",\n            format: \"auto:image\"\n          },\n          config\n        })\n      };\n    } else {\n      playerOptions.posterOptions = {\n        publicId: (0,_chunk_L3YIXMGG_js__WEBPACK_IMPORTED_MODULE_1__.constructCloudinaryUrl)({\n          options: poster,\n          config\n        })\n      };\n    }\n  }\n  return playerOptions;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cloudinary-util/url-loader/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cloudinary-util/url-loader/node_modules/@cloudinary-util/util/dist/index.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@cloudinary-util/url-loader/node_modules/@cloudinary-util/util/dist/index.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertColorHexToRgb: () => (/* binding */ convertColorHexToRgb),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),\n/* harmony export */   getFormat: () => (/* binding */ getFormat),\n/* harmony export */   getPublicId: () => (/* binding */ getPublicId),\n/* harmony export */   getTransformations: () => (/* binding */ getTransformations),\n/* harmony export */   objectHasKey: () => (/* binding */ objectHasKey),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   pollForProcessingImage: () => (/* binding */ pollForProcessingImage),\n/* harmony export */   sortByKey: () => (/* binding */ sortByKey),\n/* harmony export */   testColorIsHex: () => (/* binding */ testColorIsHex)\n/* harmony export */ });\n// src/lib/cloudinary.ts\nvar REGEX_VERSION = /\\/v\\d+\\//;\nvar REGEX_FORMAT = /\\.(ai|avif|gif|png|webp|bmp|bw|djvu|dng|ps|ept|eps|eps3|fbx|flif|gif|glb|gltf|heif|heic|ico|indd|jpg|jpe|jpeg|jp2|wdp|jxr|hdp|obj|pdf|ply|png|psd|arw|cr2|svg|tga|tif|tiff|u3ma|usdz|webp|3g2|3gp|avi|flv|m3u8|ts|m2ts|mts|mov|mkv|mp4|mpeg|mpd|mxf|ogv|webm|wmv)$/i;\nvar REGEX_URL = /https?:\\/\\/(?<host>[^/]+)\\/(?<cloudName>[^/]+)?\\/?(?<assetType>image|images|video|videos|raw|files)\\/(?<deliveryType>upload|fetch|private|authenticated|sprite|facebook|twitter|youtube|vimeo)?\\/?(?<signature>s--([a-zA-Z0-9_-]{8}|[a-zA-Z0-9_-]{32})--)?\\/?(?<transformations>(?:[^_/]+_[^,/]+,?\\/?)*\\/)*(?<version>v\\d+|\\w{1,2})\\/(?<publicId>[^\\s]+)$/;\nvar ASSET_TYPES_SEO = [\"images\", \"videos\", \"files\"];\nvar CLOUDINARY_DEFAULT_HOST = \"res.cloudinary.com\";\nfunction parseUrl(src) {\n  if (typeof src !== \"string\") {\n    throw new Error(`Failed to parse URL - Invalid src: Is not a string`);\n  }\n  const hasVersion = REGEX_VERSION.test(src);\n  if (!hasVersion) {\n    throw new Error(\n      `Failed to parse URL - Invalid src: Does not include version (Ex: /v1234/)`\n    );\n  }\n  const [baseUrlWithExtension, queryString] = src.split(\"?\");\n  const format = getFormat(baseUrlWithExtension);\n  let baseUrl = baseUrlWithExtension;\n  if (format) {\n    baseUrl = baseUrlWithExtension.replace(new RegExp(`${format}$`), \"\");\n  }\n  const results = baseUrl.match(REGEX_URL);\n  const transformations = results?.groups?.transformations?.split(\"/\").filter((t) => !!t);\n  const parts = {\n    ...results?.groups,\n    format,\n    seoSuffix: void 0,\n    transformations: transformations || [],\n    queryParams: {},\n    version: results?.groups?.version ? parseInt(results.groups.version.replace(\"v\", \"\")) : void 0\n  };\n  if (parts.host === CLOUDINARY_DEFAULT_HOST && !parts.cloudName) {\n    throw new Error(\n      \"Failed to parse URL - Invalid src: Cloudinary URL delivered from res.cloudinary.com must include Cloud Name (ex: res.cloudinary.com/<Cloud Name>/image/...)\"\n    );\n  }\n  if (queryString) {\n    parts.queryParams = queryString.split(\"&\").reduce((prev, curr) => {\n      const [key, value] = curr.split(\"=\");\n      prev[key] = value;\n      return prev;\n    }, {});\n  }\n  if (parts.assetType && ASSET_TYPES_SEO.includes(parts.assetType)) {\n    const publicIdParts = parts.publicId?.split(\"/\") || [];\n    parts.seoSuffix = publicIdParts.pop();\n    parts.publicId = publicIdParts.join(\"/\");\n  }\n  if (parts.publicId) {\n    parts.publicId = decodeURIComponent(parts.publicId);\n  }\n  return parts;\n}\nfunction getPublicId(src) {\n  const { publicId } = parseUrl(src) || {};\n  return publicId;\n}\nfunction getTransformations(src) {\n  const { transformations = [] } = parseUrl(src) || {};\n  return transformations.map((t) => t.split(\",\"));\n}\nfunction getFormat(src) {\n  const matches = src.match(REGEX_FORMAT);\n  if (matches === null) return;\n  return matches[0];\n}\nasync function pollForProcessingImage(options) {\n  try {\n    const response = await fetch(options.src);\n    if (response.status === 423) {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      return await pollForProcessingImage(options);\n    }\n    return response.ok;\n  } catch {\n    return false;\n  }\n}\n\n// src/lib/colors.ts\nfunction testColorIsHex(value) {\n  if (typeof value !== \"string\") return false;\n  return !!value.startsWith(\"#\");\n}\nfunction convertColorHexToRgb(value) {\n  return `rgb:${value.replace(\"#\", \"\")}`;\n}\n\n// src/lib/util.ts\nfunction encodeBase64(value) {\n  if (typeof btoa === \"function\") {\n    return btoa(value);\n  }\n  if (typeof Buffer !== \"undefined\") {\n    return Buffer.from(value).toString(\"base64\");\n  }\n}\nfunction objectHasKey(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction sortByKey(array = [], key, type = \"asc\") {\n  function compare(a, b) {\n    let keyA = a[key];\n    let keyB = b[key];\n    if (typeof keyA === \"string\") {\n      keyA = keyA.toLowerCase();\n    }\n    if (typeof keyB === \"string\") {\n      keyB = keyB.toLowerCase();\n    }\n    if (keyA < keyB) {\n      return -1;\n    }\n    if (keyA > keyB) {\n      return 1;\n    }\n    return 0;\n  }\n  let newArray = [...array];\n  if (typeof key !== \"string\") return newArray;\n  newArray = newArray.sort(compare);\n  if (type === \"desc\") {\n    return newArray.reverse();\n  }\n  return newArray;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNsb3VkaW5hcnktdXRpbC91cmwtbG9hZGVyL25vZGVfbW9kdWxlcy9AY2xvdWRpbmFyeS11dGlsL3V0aWwvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0Esa1BBQWtQLEVBQUUsZUFBZSxHQUFHLHlFQUF5RSxJQUFJO0FBQ25WO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELE9BQU87QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLElBQUk7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFdBQVc7QUFDckI7QUFDQTtBQUNBO0FBQ0EsVUFBVSx1QkFBdUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdUJBQXVCO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFZRSIsInNvdXJjZXMiOlsiQzpcXEludGVya29ubmVrdFxcbm9kZV9tb2R1bGVzXFxAY2xvdWRpbmFyeS11dGlsXFx1cmwtbG9hZGVyXFxub2RlX21vZHVsZXNcXEBjbG91ZGluYXJ5LXV0aWxcXHV0aWxcXGRpc3RcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9saWIvY2xvdWRpbmFyeS50c1xudmFyIFJFR0VYX1ZFUlNJT04gPSAvXFwvdlxcZCtcXC8vO1xudmFyIFJFR0VYX0ZPUk1BVCA9IC9cXC4oYWl8YXZpZnxnaWZ8cG5nfHdlYnB8Ym1wfGJ3fGRqdnV8ZG5nfHBzfGVwdHxlcHN8ZXBzM3xmYnh8ZmxpZnxnaWZ8Z2xifGdsdGZ8aGVpZnxoZWljfGljb3xpbmRkfGpwZ3xqcGV8anBlZ3xqcDJ8d2RwfGp4cnxoZHB8b2JqfHBkZnxwbHl8cG5nfHBzZHxhcnd8Y3IyfHN2Z3x0Z2F8dGlmfHRpZmZ8dTNtYXx1c2R6fHdlYnB8M2cyfDNncHxhdml8Zmx2fG0zdTh8dHN8bTJ0c3xtdHN8bW92fG1rdnxtcDR8bXBlZ3xtcGR8bXhmfG9ndnx3ZWJtfHdtdikkL2k7XG52YXIgUkVHRVhfVVJMID0gL2h0dHBzPzpcXC9cXC8oPzxob3N0PlteL10rKVxcLyg/PGNsb3VkTmFtZT5bXi9dKyk/XFwvPyg/PGFzc2V0VHlwZT5pbWFnZXxpbWFnZXN8dmlkZW98dmlkZW9zfHJhd3xmaWxlcylcXC8oPzxkZWxpdmVyeVR5cGU+dXBsb2FkfGZldGNofHByaXZhdGV8YXV0aGVudGljYXRlZHxzcHJpdGV8ZmFjZWJvb2t8dHdpdHRlcnx5b3V0dWJlfHZpbWVvKT9cXC8/KD88c2lnbmF0dXJlPnMtLShbYS16QS1aMC05Xy1dezh9fFthLXpBLVowLTlfLV17MzJ9KS0tKT9cXC8/KD88dHJhbnNmb3JtYXRpb25zPig/OlteXy9dK19bXiwvXSssP1xcLz8pKlxcLykqKD88dmVyc2lvbj52XFxkK3xcXHd7MSwyfSlcXC8oPzxwdWJsaWNJZD5bXlxcc10rKSQvO1xudmFyIEFTU0VUX1RZUEVTX1NFTyA9IFtcImltYWdlc1wiLCBcInZpZGVvc1wiLCBcImZpbGVzXCJdO1xudmFyIENMT1VESU5BUllfREVGQVVMVF9IT1NUID0gXCJyZXMuY2xvdWRpbmFyeS5jb21cIjtcbmZ1bmN0aW9uIHBhcnNlVXJsKHNyYykge1xuICBpZiAodHlwZW9mIHNyYyAhPT0gXCJzdHJpbmdcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBhcnNlIFVSTCAtIEludmFsaWQgc3JjOiBJcyBub3QgYSBzdHJpbmdgKTtcbiAgfVxuICBjb25zdCBoYXNWZXJzaW9uID0gUkVHRVhfVkVSU0lPTi50ZXN0KHNyYyk7XG4gIGlmICghaGFzVmVyc2lvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBGYWlsZWQgdG8gcGFyc2UgVVJMIC0gSW52YWxpZCBzcmM6IERvZXMgbm90IGluY2x1ZGUgdmVyc2lvbiAoRXg6IC92MTIzNC8pYFxuICAgICk7XG4gIH1cbiAgY29uc3QgW2Jhc2VVcmxXaXRoRXh0ZW5zaW9uLCBxdWVyeVN0cmluZ10gPSBzcmMuc3BsaXQoXCI/XCIpO1xuICBjb25zdCBmb3JtYXQgPSBnZXRGb3JtYXQoYmFzZVVybFdpdGhFeHRlbnNpb24pO1xuICBsZXQgYmFzZVVybCA9IGJhc2VVcmxXaXRoRXh0ZW5zaW9uO1xuICBpZiAoZm9ybWF0KSB7XG4gICAgYmFzZVVybCA9IGJhc2VVcmxXaXRoRXh0ZW5zaW9uLnJlcGxhY2UobmV3IFJlZ0V4cChgJHtmb3JtYXR9JGApLCBcIlwiKTtcbiAgfVxuICBjb25zdCByZXN1bHRzID0gYmFzZVVybC5tYXRjaChSRUdFWF9VUkwpO1xuICBjb25zdCB0cmFuc2Zvcm1hdGlvbnMgPSByZXN1bHRzPy5ncm91cHM/LnRyYW5zZm9ybWF0aW9ucz8uc3BsaXQoXCIvXCIpLmZpbHRlcigodCkgPT4gISF0KTtcbiAgY29uc3QgcGFydHMgPSB7XG4gICAgLi4ucmVzdWx0cz8uZ3JvdXBzLFxuICAgIGZvcm1hdCxcbiAgICBzZW9TdWZmaXg6IHZvaWQgMCxcbiAgICB0cmFuc2Zvcm1hdGlvbnM6IHRyYW5zZm9ybWF0aW9ucyB8fCBbXSxcbiAgICBxdWVyeVBhcmFtczoge30sXG4gICAgdmVyc2lvbjogcmVzdWx0cz8uZ3JvdXBzPy52ZXJzaW9uID8gcGFyc2VJbnQocmVzdWx0cy5ncm91cHMudmVyc2lvbi5yZXBsYWNlKFwidlwiLCBcIlwiKSkgOiB2b2lkIDBcbiAgfTtcbiAgaWYgKHBhcnRzLmhvc3QgPT09IENMT1VESU5BUllfREVGQVVMVF9IT1NUICYmICFwYXJ0cy5jbG91ZE5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkZhaWxlZCB0byBwYXJzZSBVUkwgLSBJbnZhbGlkIHNyYzogQ2xvdWRpbmFyeSBVUkwgZGVsaXZlcmVkIGZyb20gcmVzLmNsb3VkaW5hcnkuY29tIG11c3QgaW5jbHVkZSBDbG91ZCBOYW1lIChleDogcmVzLmNsb3VkaW5hcnkuY29tLzxDbG91ZCBOYW1lPi9pbWFnZS8uLi4pXCJcbiAgICApO1xuICB9XG4gIGlmIChxdWVyeVN0cmluZykge1xuICAgIHBhcnRzLnF1ZXJ5UGFyYW1zID0gcXVlcnlTdHJpbmcuc3BsaXQoXCImXCIpLnJlZHVjZSgocHJldiwgY3VycikgPT4ge1xuICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gY3Vyci5zcGxpdChcIj1cIik7XG4gICAgICBwcmV2W2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBwcmV2O1xuICAgIH0sIHt9KTtcbiAgfVxuICBpZiAocGFydHMuYXNzZXRUeXBlICYmIEFTU0VUX1RZUEVTX1NFTy5pbmNsdWRlcyhwYXJ0cy5hc3NldFR5cGUpKSB7XG4gICAgY29uc3QgcHVibGljSWRQYXJ0cyA9IHBhcnRzLnB1YmxpY0lkPy5zcGxpdChcIi9cIikgfHwgW107XG4gICAgcGFydHMuc2VvU3VmZml4ID0gcHVibGljSWRQYXJ0cy5wb3AoKTtcbiAgICBwYXJ0cy5wdWJsaWNJZCA9IHB1YmxpY0lkUGFydHMuam9pbihcIi9cIik7XG4gIH1cbiAgaWYgKHBhcnRzLnB1YmxpY0lkKSB7XG4gICAgcGFydHMucHVibGljSWQgPSBkZWNvZGVVUklDb21wb25lbnQocGFydHMucHVibGljSWQpO1xuICB9XG4gIHJldHVybiBwYXJ0cztcbn1cbmZ1bmN0aW9uIGdldFB1YmxpY0lkKHNyYykge1xuICBjb25zdCB7IHB1YmxpY0lkIH0gPSBwYXJzZVVybChzcmMpIHx8IHt9O1xuICByZXR1cm4gcHVibGljSWQ7XG59XG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1hdGlvbnMoc3JjKSB7XG4gIGNvbnN0IHsgdHJhbnNmb3JtYXRpb25zID0gW10gfSA9IHBhcnNlVXJsKHNyYykgfHwge307XG4gIHJldHVybiB0cmFuc2Zvcm1hdGlvbnMubWFwKCh0KSA9PiB0LnNwbGl0KFwiLFwiKSk7XG59XG5mdW5jdGlvbiBnZXRGb3JtYXQoc3JjKSB7XG4gIGNvbnN0IG1hdGNoZXMgPSBzcmMubWF0Y2goUkVHRVhfRk9STUFUKTtcbiAgaWYgKG1hdGNoZXMgPT09IG51bGwpIHJldHVybjtcbiAgcmV0dXJuIG1hdGNoZXNbMF07XG59XG5hc3luYyBmdW5jdGlvbiBwb2xsRm9yUHJvY2Vzc2luZ0ltYWdlKG9wdGlvbnMpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKG9wdGlvbnMuc3JjKTtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MjMpIHtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwMCkpO1xuICAgICAgcmV0dXJuIGF3YWl0IHBvbGxGb3JQcm9jZXNzaW5nSW1hZ2Uob3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiByZXNwb25zZS5vaztcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8vIHNyYy9saWIvY29sb3JzLnRzXG5mdW5jdGlvbiB0ZXN0Q29sb3JJc0hleCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAhIXZhbHVlLnN0YXJ0c1dpdGgoXCIjXCIpO1xufVxuZnVuY3Rpb24gY29udmVydENvbG9ySGV4VG9SZ2IodmFsdWUpIHtcbiAgcmV0dXJuIGByZ2I6JHt2YWx1ZS5yZXBsYWNlKFwiI1wiLCBcIlwiKX1gO1xufVxuXG4vLyBzcmMvbGliL3V0aWwudHNcbmZ1bmN0aW9uIGVuY29kZUJhc2U2NCh2YWx1ZSkge1xuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiBidG9hKHZhbHVlKTtcbiAgfVxuICBpZiAodHlwZW9mIEJ1ZmZlciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZSkudG9TdHJpbmcoXCJiYXNlNjRcIik7XG4gIH1cbn1cbmZ1bmN0aW9uIG9iamVjdEhhc0tleShvYmosIGtleSkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbn1cbmZ1bmN0aW9uIHNvcnRCeUtleShhcnJheSA9IFtdLCBrZXksIHR5cGUgPSBcImFzY1wiKSB7XG4gIGZ1bmN0aW9uIGNvbXBhcmUoYSwgYikge1xuICAgIGxldCBrZXlBID0gYVtrZXldO1xuICAgIGxldCBrZXlCID0gYltrZXldO1xuICAgIGlmICh0eXBlb2Yga2V5QSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAga2V5QSA9IGtleUEudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBrZXlCID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBrZXlCID0ga2V5Qi50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICBpZiAoa2V5QSA8IGtleUIpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgaWYgKGtleUEgPiBrZXlCKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgbGV0IG5ld0FycmF5ID0gWy4uLmFycmF5XTtcbiAgaWYgKHR5cGVvZiBrZXkgIT09IFwic3RyaW5nXCIpIHJldHVybiBuZXdBcnJheTtcbiAgbmV3QXJyYXkgPSBuZXdBcnJheS5zb3J0KGNvbXBhcmUpO1xuICBpZiAodHlwZSA9PT0gXCJkZXNjXCIpIHtcbiAgICByZXR1cm4gbmV3QXJyYXkucmV2ZXJzZSgpO1xuICB9XG4gIHJldHVybiBuZXdBcnJheTtcbn1cbmV4cG9ydCB7XG4gIGNvbnZlcnRDb2xvckhleFRvUmdiLFxuICBlbmNvZGVCYXNlNjQsXG4gIGdldEZvcm1hdCxcbiAgZ2V0UHVibGljSWQsXG4gIGdldFRyYW5zZm9ybWF0aW9ucyxcbiAgb2JqZWN0SGFzS2V5LFxuICBwYXJzZVVybCxcbiAgcG9sbEZvclByb2Nlc3NpbmdJbWFnZSxcbiAgc29ydEJ5S2V5LFxuICB0ZXN0Q29sb3JJc0hleFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cloudinary-util/url-loader/node_modules/@cloudinary-util/util/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@cloudinary-util/util/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@cloudinary-util/util/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertColorHexToRgb: () => (/* binding */ convertColorHexToRgb),\n/* harmony export */   encodeBase64: () => (/* binding */ encodeBase64),\n/* harmony export */   getFormat: () => (/* binding */ getFormat),\n/* harmony export */   getPublicId: () => (/* binding */ getPublicId),\n/* harmony export */   getTransformations: () => (/* binding */ getTransformations),\n/* harmony export */   objectHasKey: () => (/* binding */ objectHasKey),\n/* harmony export */   parseUrl: () => (/* binding */ parseUrl),\n/* harmony export */   pollForProcessingImage: () => (/* binding */ pollForProcessingImage),\n/* harmony export */   sortByKey: () => (/* binding */ sortByKey),\n/* harmony export */   testColorIsHex: () => (/* binding */ testColorIsHex)\n/* harmony export */ });\n// src/lib/cloudinary.ts\nvar REGEX_VERSION = /\\/v\\d+\\//;\nvar REGEX_FORMAT = /\\.(ai|avif|gif|png|webp|bmp|bw|djvu|dng|ps|ept|eps|eps3|fbx|flif|gif|glb|gltf|heif|heic|ico|indd|jpg|jpe|jpeg|jp2|wdp|jxr|hdp|obj|pdf|ply|png|psd|arw|cr2|svg|tga|tif|tiff|u3ma|usdz|webp|3g2|3gp|avi|flv|m3u8|ts|m2ts|mts|mov|mkv|mp4|mpeg|mpd|mxf|ogv|webm|wmv)$/i;\nvar REGEX_URL = /https?:\\/\\/(?<host>[^/]+)\\/(?<cloudName>[^/]+)?\\/?(?<assetType>image|images|video|videos|raw|files)\\/(?<deliveryType>upload|fetch|private|authenticated|sprite|facebook|twitter|youtube|vimeo)?\\/?(?<signature>s--([a-zA-Z0-9_-]{8}|[a-zA-Z0-9_-]{32})--)?\\/?(?<transformations>(?:[^_/]+_[^,/]+,?\\/?)*\\/)*(?<version>v\\d+|\\w{1,2})\\/(?<publicId>[^\\s]+)$/;\nvar ASSET_TYPES_SEO = [\"images\", \"videos\", \"files\"];\nvar CLOUDINARY_DEFAULT_HOST = \"res.cloudinary.com\";\nfunction parseUrl(src) {\n  if (typeof src !== \"string\") {\n    throw new Error(`Failed to parse URL - Invalid src: Is not a string`);\n  }\n  const hasVersion = REGEX_VERSION.test(src);\n  if (!hasVersion) {\n    throw new Error(\n      `Failed to parse URL - Invalid src: Does not include version (Ex: /v1234/)`\n    );\n  }\n  const [baseUrlWithExtension, queryString] = src.split(\"?\");\n  const format = getFormat(baseUrlWithExtension);\n  let baseUrl = baseUrlWithExtension;\n  if (format) {\n    baseUrl = baseUrlWithExtension.replace(new RegExp(`${format}$`), \"\");\n  }\n  const results = baseUrl.match(REGEX_URL);\n  const transformations = results?.groups?.transformations?.split(\"/\").filter((t) => !!t);\n  const parts = {\n    ...results?.groups,\n    format,\n    seoSuffix: void 0,\n    transformations: transformations || [],\n    queryParams: {},\n    version: results?.groups?.version ? parseInt(results.groups.version.replace(\"v\", \"\")) : void 0\n  };\n  if (parts.host === CLOUDINARY_DEFAULT_HOST && !parts.cloudName) {\n    throw new Error(\n      \"Failed to parse URL - Invalid src: Cloudinary URL delivered from res.cloudinary.com must include Cloud Name (ex: res.cloudinary.com/<Cloud Name>/image/...)\"\n    );\n  }\n  if (queryString) {\n    parts.queryParams = queryString.split(\"&\").reduce((prev, curr) => {\n      const [key, value] = curr.split(\"=\");\n      prev[key] = value;\n      return prev;\n    }, {});\n  }\n  if (parts.assetType && ASSET_TYPES_SEO.includes(parts.assetType)) {\n    const publicIdParts = parts.publicId?.split(\"/\") || [];\n    parts.seoSuffix = publicIdParts.pop();\n    parts.publicId = publicIdParts.join(\"/\");\n  }\n  if (parts.publicId) {\n    parts.publicId = decodeURIComponent(parts.publicId);\n  }\n  return parts;\n}\nfunction getPublicId(src) {\n  const { publicId } = parseUrl(src) || {};\n  return publicId;\n}\nfunction getTransformations(src) {\n  const { transformations = [] } = parseUrl(src) || {};\n  return transformations.map((t) => t.split(\",\"));\n}\nfunction getFormat(src) {\n  const matches = src.match(REGEX_FORMAT);\n  if (matches === null) return;\n  return matches[0];\n}\nasync function pollForProcessingImage(options) {\n  try {\n    const response = await fetch(options.src);\n    if (response.status === 423) {\n      await new Promise((resolve) => setTimeout(resolve, 500));\n      return await pollForProcessingImage(options);\n    }\n    if (!response.ok) {\n      return {\n        success: false,\n        status: response.status,\n        error: response.headers.get(\"x-cld-error\") || \"Unknown error\"\n      };\n    }\n    return {\n      success: true,\n      status: response.status\n    };\n  } catch (error) {\n    return {\n      success: false,\n      status: 500,\n      error: error.message || \"Network error\"\n    };\n  }\n}\n\n// src/lib/colors.ts\nfunction testColorIsHex(value) {\n  if (typeof value !== \"string\") return false;\n  return !!value.startsWith(\"#\");\n}\nfunction convertColorHexToRgb(value) {\n  return `rgb:${value.replace(\"#\", \"\")}`;\n}\n\n// src/lib/util.ts\nfunction encodeBase64(value) {\n  if (typeof btoa === \"function\") {\n    return btoa(value);\n  }\n  if (typeof Buffer !== \"undefined\") {\n    return Buffer.from(value).toString(\"base64\");\n  }\n}\nfunction objectHasKey(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\nfunction sortByKey(array = [], key, type = \"asc\") {\n  function compare(a, b) {\n    let keyA = a[key];\n    let keyB = b[key];\n    if (typeof keyA === \"string\") {\n      keyA = keyA.toLowerCase();\n    }\n    if (typeof keyB === \"string\") {\n      keyB = keyB.toLowerCase();\n    }\n    if (keyA < keyB) return -1;\n    if (keyA > keyB) return 1;\n    return 0;\n  }\n  let newArray = [...array];\n  if (typeof key !== \"string\") return newArray;\n  newArray = newArray.sort(compare);\n  if (type === \"desc\") {\n    return newArray.reverse();\n  }\n  return newArray;\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@cloudinary-util/util/dist/index.js\n");

/***/ })

};
;